mondoo {
  version() string
  build() string
  resources() []string
}

command {
  init(command string)
  command string
  stdout() string
  stderr() string
  exitcode() int
}

powershell {
  init(script string)
  script string
  stdout() string
  stderr() string
  exitcode() int
}

file {
  init(path string)
  path string
  content(path) string
  exists() bool
  permissions() file.permissions
}

file.permissions {
  user_readable bool
  user_writeable bool
  user_executable bool
  group_readable bool
  group_writeable bool
  group_executable bool
  other_readable bool
  other_writeable bool
  other_executable bool
  suid bool
  sgid bool
  sticky bool
}

files.find {
  []file
  from string
  xdev() bool
  type() string
}

sshd.config {
  init(path string)
  file() file
  content(file) string
  params(content) map[string]string
}

platform {
  name string
  title string
  family []string
  release string
  arch string
  uuid() string
  hostname() string
}

package {
  init(name string)

  name string
  version string
  arch string
  epoch string

  format string
  status() string
  description string

  available string
  installed bool
  outdated() bool
}

packages {
  []package
}

kernel {
  parameters() map[string]string
  modules() []kernel.module
}

kernel.module {
  init(name string)

  name string
  size string
  loaded bool
}

osupdate {
  name string
  category string
  severity string
  restart bool
  format string
}

os {
  env() map[string]string
  path() []string
  uptime() string
  updates() []osupdate
  rebootpending() bool
}

process {
  init(pid int)
  pid int
  state() string
  executable() string
  command() string
}

processes {
  []process
}

user {
  init(id string)
  id string
  uid int
  gid int
  sid string
  username string
  home string
  shell string
  enabled bool
}

users {
  []user
}

service {
  init(name string)
  name string
  description() string
  installed() bool
  running() bool
  enabled() bool
  type() string
}

services {
  []service
}

group {
  init(id string)
  id string
  gid int
  sid string
  name string
  members() []user
}

groups {
  []group
}

docker {
  images() []docker_image
  container() []docker_container
}

docker_image {
  id string
  size int
  virtualsize int
  tags []string
  labels map[string]string
}

docker_container {
  id string
  command string
  image string
  imageid string
  names []string
  state string
  status string
  labels map[string]string
}

auditpol {
  []auditpol_entry
}

auditpol_entry {
  machinename      string
	policytarget     string
	subcategory      string
	subcategoryguid  string
	inclusionsetting string
	exclusionsetting string
}

secpol {
  systemaccess() map[string]string
  eventaudit() map[string]string
  registryvalues() map[string]string
  privilegerights() map[string][]string
}

logindefs {
  init(path string)
  file() file
  content(file) string
  params(content) map[string]string
}

mount {
  []mount_point
}

mount_point {
  device string
  path string
  fstype string
  options map[string]string
}

shadow {
  []shadow_entry
}

shadow_entry {
  user string
  password string
  lastchanges string
  mindays string
  maxdays string
  warndays string
  inactivedays string
  expirydates string
  reserved string
}

registrykey {
  init(path string)
  path string
  exists() bool
  properties() map[string]string
  children() []string
}