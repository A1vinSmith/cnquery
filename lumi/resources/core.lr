// Provide contextual info about the mondoo client and environment
mondoo {
  // Version of mondoo the client is running
  version() string
  // The build of the mondoo client (e.g. production, development)
  build() string
  // All resources supported by the language
  resources() []string
  // Returns the agent execution environment
  jobEnvironment() dict
  // Transport capabilities
  capabilities() []string
}

// Parse provides common parsers (json, ini, certs, etc)
parse {
  // Builtin functions:
  // Date(value, format) time
}

// Date and time functions
time {
  // The current time on the local system
  now() time
  // One second, used for durations
  second() time
  // One minute, used for durations
  minute() time
  // One hour, used for durations
  hour() time
  // One day, used for durations
  day() time
}

// Parse INI files
parse.ini {
  init(path string, delimiter string)
  // Symbol that is separating keys and values
  delimiter() string
  // File that is being parsed
  file() file
  // Raw content of the file that is parsed
  content(file) string
  // A map of sections and key-value pairs
  sections(content, delimiter) map[string]map[string]string
  // A map of parameters that don't belong to sections
  params(sections) map[string]string
}

// Parse JSON files
parse.json {
  init(path string)
  // File that is being parsed
  file() file
  // Raw content of the file that is parsed
  content(file) string
  // The parsed parameters that are defined in this file
  params(content) dict
}

// Common platform information (OS, API, Service)
platform {
  // Name of the platform
  name string
  // Human-readable name of the platform
  title string
  // List of platform families that this platfrom belongs to
  family []string
  // Release version of the platform
  release string
  // Build version of the platfrom (optional)
  build string
  // Architecture this OS is running on
  arch string
  // Kind of this platform (API, code, image, package, etc)
  kind string
  // Contextual information about the runtime (bare-metal, cloud, container, etc)
  // TODO: rename to runtime (it conflicts with built-in runtime) 
  runtimeEnv string
}

// hardware virtualization information
platform.virtualization {
  // indicates if the target is a container or container image
  isContainer() bool
}

// information about the platfrom end-of-life
platform.eol {
  // Documentation URL
  docsUrl string
  // Product URL
  productUrl string
  // eol date
  date time
}

// Returns all Platform/Package advisories
platform.advisories {
  []audit.advisory
  // Worst CVSS score for all advisories
  cvss() audit.cvss
  // returns statistical information: total, critical, high, medium, low, none, unknown
  stats() dict
}

// Returns all Platform/Package cves
platform.cves {
  []audit.cve
  // Worst CVSS score for all cves
  cvss() audit.cvss
  // returns statistical information: total, critical, high, medium, low, none, unknown
  stats() dict
}

// Returns all Platform/Package exploits
platform.exploits {
  []audit.exploit
  // Worst CVSS score for all exploits
  cvss() audit.cvss
  // returns statistical information: total, critical, high, medium, low, none, unknown
  stats() dict
}

// Common Vulnerability Scoring System (CVSS) Score
audit.cvss {
  // CVSS Score ranging from 0.0 to 10.0
  score   float
  // CVSS score is also represented as a vector string
  vector  string
}

// Platform/Package advisory
audit.advisory {
  // Advisory ID
  id          string
  // Mondoo Advisory Identifier
  mrn         string
  // Advisory Title
  title       string
  // Advisory Description
  description string
  // Advisory publication date
  published   time
  // Last modification date
  modified    time
  // Worst CVSS Score of all assigned CVEs
  worstScore    audit.cvss
}

// Common Vulnerabilities and Exposures (CVE)
audit.cve {
  // CVE ID
  id        string
  // Mondoo CVE Identifier
  mrn       string
  // CVE state
  state     string
  // Summary Description
  summary   string
  // Indicates if the CVE has a CVSS score
  unscored  bool
  // publication date
  published   time
  // Last modification date
  modified    time
  // Worst CVSS Score of all assigned CVEs
  worstScore    audit.cvss
}

// Exploit Information
audit.exploit {
  // CVE ID
  id        string
  // Mondoo CVE Identifier
  mrn       string
  // Last modification date
  modified    time
  // Worst CVSS Score of all assigned CVEs for this exploit
  worstScore    audit.cvss
}

// Results of running a command on the system
command {
  init(command string)
  // Raw contents of the command
  command string
  // Standard output from running the command
  stdout() string
  // Standard error output from running the command
  stderr() string
  // Exit code the command returned
  exitcode() int
}

// Results of running a powershell script on the system
powershell {
  init(script string)
  // Raw contents of the script
  script string
  // Standard output from running the script
  stdout() string
  // Standard error output from running the script
  stderr() string
  // Exit code the script returned
  exitcode() int
}

// File on the system
file {
  init(path string)
  // Location of the file on the system
  path string
  // Filename without path prefix of this file
  basename(path) string
  // Path to the folder containing this file
  dirname(path) string
  // Contents of this file
  content(path, exists) string
  // Indicator if this file exists on the system
  exists() bool
  // Permissions for this file
  permissions() file.permissions
  // Size of this file on disk
  size() int
  // Ownership information about the user
  user() user
  // Ownership information about the group
  group() group
}

// Access permissions for a given file
file.permissions {
  // Raw POSIX mode for the permissions
  mode int
  // Indicator if this file is readable by its owner
  user_readable bool
  // Indicator if this file is writeable by its owner
  user_writeable bool
  // Indicator if this file is executable by its owner
  user_executable bool
  // Indicator if this file is readable by members of the group
  group_readable bool
  // Indicator if this file is writeable by members of the group
  group_writeable bool
  // Indicator if this file is executable by members of the group
  group_executable bool
  // Indicator if this file is readable by others
  other_readable bool
  // Indicator if this file is writeable by others
  other_writeable bool
  // Indicator if this file is executable by others
  other_executable bool
  // SUID bit indicator
  suid bool
  // SGID bit indicator
  sgid bool
  // Sticky bit indicator
  sticky bool
  // whether the file describes a directory
  isDirectory bool
  // whether the file describes a regular file
  isFile bool
  // whether the file is a symlink
  isSymlink bool
}

// Find files on the system efficiently
files.find {
  []file
  // From sets the starting point for the search operation
  from string
  // xdev indicates if other devices will be searched
  xdev() bool
  // What types of files will be listed (directories, files, devices, etc)
  type() string
  // A regular expression for the file search
  regex() string
  // What permissions the file matches
  permissions() int
  // Search name of the name
  name() string
}

// PAM configuration (Pluggable Authentication Module)
pam.conf {
  init(path string)
  // A list of files that make up the PAM configuration
  files() []file
  // The raw PAM configuration (across all files)
  content(files) string
  // A list of services that are configured via PAM
  services(files) map[string][]string
}

// SSH server resource
sshd {}

// SSH server configuration
sshd.config {
  init(path string)
  // File of this SSH server configuration
  file() file
  // Raw content of this SSH server config
  content(file) string
  // Configuration values of this SSH server
  params(content) map[string]string
  // Ciphers configured for this SSH server
  ciphers(params) []string
  // MACs configured for this SSH server
  macs(params) []string
  // Key Exchange Algorithms configured for this SSH server
  kexs(params) []string
}

// Package on the platform or OS
package {
  init(name string)

  // Name of the package
  name string
  // Current version of the package
  version string
  // Architecture of this package
  arch string
  // Epoch of this package
  epoch string

  // Format of this package (e.g. rpm, deb)
  format string
  // Status of this package (e.g. if it is needed)
  status() string
  // Package description
  description string

  // Available version
  available string
  // Indicates if this package is installed
  installed bool
  // Indicates if this package is outdated
  outdated() bool
}

// List of packages on this system
packages {
  []package
}

// Kernel information for this OS
kernel {
  // Kernel parameters map
  parameters() map[string]string
  // List of kernel modules
  modules() []kernel.module
}

// Kernel module information
kernel.module {
  init(name string)

  // Name of the kernel module
  name string
  // Size of the kernel module
  size string
  // Indicates if this module is loaded
  loaded bool
}

// NTP service configuration
ntp.conf {
  init(path string)
  // File of this NTP service configuration
  file() file
  // Raw contents of this NTP service configuration
  content(file) string
  // List of settings for this NTP service
  settings(content) []string
  // List of servers for this NTP service
  servers(settings) []string
  // List of access control restrictions for this NTP service
  restrict(settings) []string
  // Additional information for clock drivers
  fudge(settings) []string
}

// Rsyslog service configuration
rsyslog.conf {
  init(path string)
  // Files that make up this Rsyslog service configuration
  files() []file
  // Raw contents of this Rsyslog service configuration
  content(files) string
  // List of settings for this Rsyslog service
  settings(content) []string
}

machine {}

// SMBIOS BIOS Information
machine.bios {
  // BIOS vendor
  vendor string
  // BIOS version
  version string
  // BIOS release date
  releaseDate string
}

// SMBIOS System Information
machine.system {
  // Manufacturer
  manufacturer string
  // Product Name
  product string
  // Version
  version string
  // Serial Number
  serial string
  // UUID
  uuid string
  // SKU Number
  sku string
  // Family
  family string
}

// SMBIOS Baseboard (or Module) Information 
machine.baseboard {
  // Manufacturer
  manufacturer string
  // Product
  product string
  // Version
  version string
  // Serial Number
  serial string
  // Asset Tag
  assetTag string
}

// SMBIOS System Enclosure or Chassis
machine.chassis {
  // Manufacturer
  manufacturer string
  // Version
  version string
  // Serial Number
  serial string
  // Asset Tag Number
  assetTag string
}

// Operating System information
os {
  // ENV variable contents
  env() map[string]string
  // PATH variable contents
  path() []string
  // Current uptime
  uptime() time
  // List of available OS updates
  updates() []os.update
  // Indicates if a reboot is pending
  rebootpending() bool
  // Hostname for this OS
  hostname() string
  // Machine ID for this OS
  machineid() string
}

// Operating System update information
os.update {
  // Name of the update
  name string
  // Category of the update
  category string
  // Severity of the update
  severity string
  // Indicates if a restart is required
  restart bool
  // Package format for this update
  format string
}

// Operating System root certificates
os.rootcertificates {
  []certificate(content)
  // List of files that define these certificates
  files() []file
  content(files) []string
}

// Process on this system
process {
  init(pid int)
  // PID (process ID)
  pid int
  // State of the process (sleeping, running, etc)
  state() string
  // Executable that is running this process
  executable() string
  // Full command used to run this process
  command() string
  // Map of additional flags
  flags() map[string]string
}

// Processes available on this system
processes {
  []process
}

// User on this system
user {
  // User ID
  uid int
  // User's Group ID
  gid int
  // User's Security Identifier (Windows)
  sid string
  // Name of the user
  name string
  // Home folder
  home string
  // Default shell configured
  shell string
  // Indicates if the user is enabled
  enabled bool
  // List of authorized keys
  authorizedkeys() authorizedkeys
  // List of SSH keys
  sshkeys() []privatekey
}

// Users configured on this system
users {
  []user
}

// Service on this system
service {
  init(name string)
  // Name of this service
  name string
  // Service description
  description() string
  // Is it installed?
  installed() bool
  // Is it running?
  running() bool
  // Is it enabled? (start at boot)
  enabled() bool
  // Type information
  type() string
  // Is it masked?
  masked() bool
}

// Services configured on this system
services {
  []service
}

// Group on this system
group {
  init(id string)
  // Group ID
  gid int
  // Group's Security Identifier (Windows)
  sid string
  // Name of this group
  name string
  // Users who are members of this group
  members() []user
}

// Groups configured on this system
groups {
  []group
}

docker {
  images() []docker.image
  container() []docker.container
}

docker.image {
  id string
  size int
  virtualsize int
  tags []string
  labels map[string]string
}

docker.container {
  id string
  command string
  image string
  imageid string
  names []string
  state string
  status string
  labels map[string]string
}

auditpol {
  []auditpol.entry
}

auditpol.entry {
  machinename      string
	policytarget     string
	subcategory      string
	subcategoryguid  string
	inclusionsetting string
	exclusionsetting string
}

secpol {
  systemaccess() map[string]string
  eventaudit() map[string]string
  registryvalues() map[string]string
  privilegerights() map[string][]string
}

logindefs {
  init(path string)
  file() file
  content(file) string
  params(content) map[string]string
}

mount {
  []mount.point
}

mount.point {
  device string
  path string
  fstype string
  options map[string]string
}

shadow {
  []shadow.entry
}

shadow.entry {
  user string
  password string
  lastchanged time
  mindays string
  maxdays string
  warndays string
  inactivedays string
  expirydates string
  reserved string
}

registrykey {
  init(path string)
  path string
  exists() bool
  properties() map[string]string
  children() []string
}

registrykey.property {
  init(path string, name string)
  path string
  name string
  value() string
  exists() bool
}

yaml.path {
  filepath string
  jsonpath string
  result() string
}

authorizedkeys {
  []authorizedkeys.entry(file, content)
  init(path string)
  path string
  file() file
  content(file) string
}

authorizedkeys.entry {
  line int
  type string
  key string
  label() string
  options() []string
  file file
}

parse.certificates {
  []certificate(content, path)
  init(path string)
  path string
  file() file
  content(file) string
}

pkix.name {
  id string
  dn string
  serialnumber string
  commonname string
  country []string
  organization []string
  organizationalunit []string
	locality []string
  province []string
	streetaddress []string
  postalcode []string
	names      map[string]string
	extranames map[string]string
}

pkix.extension {
  identifier string
  critical bool
  value string
}

certificate {
  pem string
  hashs() map[string]string
  serial() string
  subjectkeyid() string
  authoritykeyid() string
  subject() pkix.name
  issuer() pkix.name
  version() int
  notbefore() int
  notafter() int
  signature() string
  signingalgorithm() string
  isca() bool
  keyusage() []string
  extendedkeyusage() []string
  extensions() []pkix.extension
  policyidentifier() []string
  crldistributionpoints() []string
  ocspserver() []string
  issuingcertificateurl() []string
}

privatekey {
  pem string
  path() string
  encrypted() bool
}

// VMware vSphere resource
vsphere {
  // system information including the name, type, version, and build number
  about() dict
  // configured licenses
  licenses() []vsphere.license
  // list of available datacenter
  datacenters() []vsphere.datacenter
}

// vSphere license information
vsphere.license {
  // License name
  name string
  // Total licenses
  total int
  // Used licenses
  used int
}

// VMware ESXi resource
esxi {
  // Current Targeted ESXi Host
  host() vsphere.host
  // Current Targeted Virtual Machine
  vm() vsphere.vm
}

// vSphere datacenter inventory
vsphere.datacenter {
  // vSphere managed object ID
  moid string
  // vSphere datacenter name
  name string
  // vSphere inventory path
  inventoryPath string
  // Hosts in datacenter
  hosts() []vsphere.host
  // VMs in datacenter
  vms() []vsphere.vm
  // Clusters in datacenter
  clusters() []vsphere.cluster
}

// vSphere cluster resource
vsphere.cluster {
  // vSphere managed object ID
  moid string
  // vSphere resource name
  name string
  // vSphere inventory path
  inventoryPath string
  // Cluster properties
  properties dict
  // ESXi hosts running in cluster
  hosts() []vsphere.host
}

// vSphere ESXi host resource
vsphere.host {
  // vSphere managed object ID
  moid string
  // vSphere Resource Name
  name string
  // vSphere inventory path
  inventoryPath string
  // ESXi properties
  properties dict
  // Lists of standard virtual switches
  standardSwitch() []vsphere.vswitch.standard
  // Lists of distributed virtual switches
  distributedSwitch() []vsphere.vswitch.dvs
  // Lists physical NICs currently installed and loaded on the system
  adapters() []vsphere.vmnic
  // Lists of virtual network interface that is used by the VMKernel
  vmknics() []vsphere.vmknic
  // Lists all VIBs installed on your ESXi host
  packages() []esxi.vib
  // Host-level VIB acceptance level
  acceptanceLevel() string
  // kernel modules (drivers) on ESXi
  kernelModules() []esxi.kernelmodule
  // ESXi host advanced settings
  advancedSettings() map[string]string
  // List of ESXi management services
  services() []esxi.service
  // Host timezone settings
  timezone() esxi.timezone
  // Host NTP configuration
  ntp() esxi.ntpconfig
  // Host SNMP configuration
  snmp() map[string]string
}

// vSphere VM resource
vsphere.vm {
  // vSphere managed object ID
  moid string
  // vSphere resource name
  name string
  // vSphere inventory path
  inventoryPath string
  // Virtual machine properties
  properties dict
  // Virtual machine advanced properties
  advancedSettings() map[string]string
}

// vSphere standard virtual switch 
vsphere.vswitch.standard {
  // Virtual switch name
  name string
  // Virtual switch properties
  properties dict
  // NIC teaming policy
  failoverPolicy() dict
  // Security policy
  securityPolicy() dict
  // Shaping policy
  shapingPolicy() dict
  // List of physical NICs currently configured as uplinks 
  uplinks() []vsphere.vmnic
}

// vSphere distributed virtual switch
vsphere.vswitch.dvs {
  // Virtual switch name
  name string
  // Virtual switch properties
  properties dict
  // List of physical NICs currently configured as uplinks 
  uplinks() []vsphere.vmnic
}

// vSphere ESXi physical network interface resource
vsphere.vmnic {
  // NIC name
  name string
  // NIC properties
  properties dict
  // generic configuration of a network device
  details() dict
  // NIC pause parameters
  pauseParams dict
}

// vSphere ESXi virtual network interface resource
vsphere.vmknic {
  // Interface name
  name string
  // Interface properties
  properties dict
  // IPv4 information
  ipv4 []dict
  // IPv6 information
  ipv6 []dict
  // network interface tag
  tags []string
}

// vSphere installation bundle resource
esxi.vib {
  id string
  // Bundle name
  name string
  // Acceptance level
  acceptanceLevel string
  // Creation date
  creationDate time
  // Install date
  installDate time
  // Bundle status
  status string
  // Bundle vendor
  vendor string
  // Bundle version
	version string
}

// vSphere ESXi kernel module resource
esxi.kernelmodule {
  // Module name
  name string
  // Module file location
  modulefile string
  // Module version
  version string
  // Flag if the module is loaded
  loaded bool
  // Module license
  license string
  // Flag if the module is enabled
  enabled bool
  // Module signed status
  signedStatus string
  // Module signed digest
  signatureDigest string
  // Module signed fingerprint
  signatureFingerprint string
  // Module acceptance level
  vibAcceptanceLevel string
}

// vSphere ESXi management service resource
esxi.service {
  // Brief identifier for the service
  key string
  // Display label for the service
  label string
  // Flag indicating whether the service is required and cannot be disabled
  required bool
  // Deprecated. This flag is unimplemented and will always be set to false
  uninstallable bool
  // Flag indicating whether the service is currently running
  running bool
  // List of firewall rulesets used by this service
  ruleset []string
  // Service activation policy
  policy string
}

// vSphere ESXi timezone resource
esxi.timezone {
  // Identifier for the time zone
  key string
  // Time zone name.
  name string
  // Description of the time zone
  description string
  // GMT offset
  offset int
}

// vSphere ESXi NTP configuration resource
esxi.ntpconfig {
  id string
  // List of time servers, specified as either IP addresses or fully qualified domain names (FQDNs)
  server []string
  // Content of ntp.conf host configuration file, split by lines
  config []string
}

// Arista EOS resource
arista.eos {
  // EOS system configuration
  systemConfig() map[string]string
  // IP interfaces
  ipInterfaces() []arista.eos.ipInterface
  // Details related to interfaces
  interfaces() []arista.eos.interface
  // Software and hardware versions
  version() dict
  // The system hostname
  hostname() string
  // The systems fqdn
  fqdn() string
  // Local user configuration
  users() []arista.eos.user
  // All user-defined and built-in roles
  roles() []arista.eos.role
  // Details on SNMP operation
  snmp() arista.eos.snmpSetting
  // Show NTP status
  ntp() arista.eos.ntpSetting
}

// Arista EOS system’s operating configuration
arista.eos.runningConfig {
  // returns EOS running-config
  content() string
}

// Arista EOS system’s operating configuration for a sepecific section
arista.eos.runningConfig.section {
  // section name
  name string
  // returns the section from EOS running-config
  content() string
}

// User on the local Arista EOS system
arista.eos.user {
  // The name of the user
  name string
  // Indicates if the user is able to authenticate without a password
  privilege string
  // User's assigned role
  role string
  // If the user is not password protected
  nopassword string
  // Specifies how the secret is encoded
  format string
  // The secret (password) assigned to this user
  secret string
  // User's sshkey
  sshkey string
}

// Arista EOS role resource
arista.eos.role {
  // Name of role
  name string
  // Flag for default role
  default bool
  // List of rules that restricts access to specified commands
  rules []dict
}

// Arista EOS SNMP information resource
arista.eos.snmpSetting {
  // SNMP logging status
  enabled bool
  // SNMP trap generation information
  notifications() []dict
}

// Arista EOS NTP information resource
arista.eos.ntpSetting {
  // Status of NTP on the switch
  status string
}

// Arista EOS interface resource
arista.eos.interface {
  // Interface name, link status, vlan, duplex, speed, and type of the specified interfaces
  name string
  // Interface bandwidth
  bandwidth int
  // 'burned in' address of the interface
  burnedInAddress string
  // Interface description
  description string
  // Forwarding mode
  forwardingModel string
  // Hardware Name
  hardware string
  // Interface address information
  interfaceAddress []dict
  // Traffic count information
  interfaceCounters dict
  // Interface membership
  interfaceMembership string
  // Interface statisctics
  interfaceStatistics dict
  // Interface status
  interfaceStatus string
  // Layer 2 MTU
  l2Mtu int
  // Last interface change timestamp
  lastStatusChangeTimestamp int
  // Interface protocol status
  lineProtocolStatus string
  // MTU
  mtu int
  // MAC address of the interface
  physicalAddress string
  // Interface link status, vlan, duplex, speed, and type
  status() dict
}

// Arista EOS IP interfacea
arista.eos.ipInterface {
  // Interface Name
  name string
  // IP Address
  address string
  // MTU
  mtu string
}

// Arista Spanning Tree Protocol (STP) resource
arista.eos.stp {
  // Multiple Spanning Tree Protocol (MST) instances
  mstInstances() []arista.eos.stp.mst
}

// Arista Multiple Spanning Tree Protocol (MSTP) resource instance
arista.eos.stp.mst {
  // MST instance number
  instanceId string
  // MST instance name
  name string
  // SPT protocol
  protocol string
  // Detailed bridge information (Forward Delay, MAC, Priority)
  bridge dict
  // Root bridge information
  rootBridge dict
  // Regional root bridge information
  regionalRootBridge dict
  // interfaces on the specified MST instances
  interfaces []arista.eos.spt.mstInterface
}

// Multiple Spanning Tree Protocol (MSTP) information for a specified interface
arista.eos.spt.mstInterface {
  id string
  // MST instance number
  mstInstanceId string
  // Name of STP instance
  name string
  // Interface priority
  priority int
  // Link type
  linkType string
  // Interface state
  state string
  // Cost value for the interface
  cost int
  // Rort role
  role string
  // Interface inconsistent features 
  inconsistentFeatures dict
  // Port Number
  portNumber int
  // Flag if it is an edge port
  isEdgePort bool
  // Details about Designated root, Designated bridge and Designated port
  detail dict
  // Interface Boundary Type
  boundaryType string
  // Number of BPDU transactions on this interface 
  counters() dict
  // Interface features: BPDU filter, specifies the BPDU reception rate & link type of the interface
  features() dict
}
aws {
  // list of vpcs in the account (across all regions)
  vpcs() []aws.vpc
  // list of regions for the account
  regions() []string
}

// AWS cloud service for encypted file storage
aws.efs {
  // a list of filesystems managed by the service
  filesystems() []aws.efs.filesystem
}

aws.efs.filesystem {
  // name of the filesystem
  name string
  // id of the filesystem
  id string
  // arn of the filesystem
  arn string
  // denotes whether or not the filesystem id encrypted
  encrypted bool
  // KMS key id used for encryption of the filesystem
  kmsKeyId string
  // backup policy for the filesystem
  backupPolicy() dict
  // region in which the filesystem exists
  region string
}

// AWS service to create and manage permissions for users and groups
aws.iam {
  // list of iam users in the account
  users() []aws.iam.user
  // list of iam roles in the account
  roles() []aws.iam.role
  // list of iam groups in the account
  groups() []aws.iam.group
  // list of iam policies in the account
  policies() []aws.iam.policy
  // list of iam policies attached to a user, role, or group
  attachedPolicies() []aws.iam.policy
  // iam credential report
  credentialReport() []aws.iam.usercredentialreportentry
  // iam account password policy for the account
  accountPasswordPolicy() map[string]string
  // iam account summary
  accountSummary() map[string]int
  // list of virtual mfs devices associated with the account
  virtualMfaDevices() []aws.iam.virtualmfadevice
}

aws.iam.usercredentialreportentry {
  init(properties map[string]string)
  // properties on the iam user credential report
  properties map[string]string

  // arn for the credential report
  arn() string

  // denotes if the access key is active
  accessKey1Active() bool
  // time when key was last rotated
  accessKey1LastRotated() time
  // time when key was last used
  accessKey1LastUsedDate() time
  // region in which the key was last used
  accessKey1LastUsedRegion() string
  // service that last used the key
  accessKey1LastUsedService() string

  // denotes if the access key is active
  accessKey2Active() bool
  // time when key was last rotated
  accessKey2LastRotated() time
  // time when key was last used
  accessKey2LastUsedDate() time
  // region in which the key was last used
  accessKey2LastUsedRegion() string
  // service that last used the key
  accessKey2LastUsedService() string

  // denotes if the cert is active
  cert1Active() bool
  // time when the cert was last rotated
  cert1LastRotated() time

  // denotes if the cert is active
  cert2Active() bool
  // time when the cert was last rotated
  cert2LastRotated() time

  // denotes if mfa is active in the account
  mfaActive() bool
  // denotes if passwords are enabled 
  passwordEnabled() bool
  // time when the password was last changed
  passwordLastChanged() time
  // time when the password was last used
  passwordLastUsed() time
  // next time when the password should rotate
  passwordNextRotation() time

  // iam user
  user() aws.iam.user
  // time when user was created
  userCreationTime() time
}

aws.iam.user {
  // arn of the iam user 
  arn string
  // id of the iam user
  id string
  // name of the user
  name string
  // time when user was created
  createDate time
  // time when password was last used
  passwordLastUsed time
  // tags for the iam user
  tags map[string]string
  // list of inline policies attached to the user
  policies() []string
  // list of managed policies attached to the user
  attachedPolicies() []aws.iam.policy
}

aws.iam.policy {
  // ARN of the policy
  arn string
  // id of the policy
  id() string
  // name of the policy
  name() string
  // description of the policy
  description() string
  // denotes if the policy can be attached
  isAttachable() bool
  attachmentCount() int
  // time when the policy was created
  createDate() time
  // time when the policy was updated
  updateDate() time
  // scope of the policy
  scope() string
  // list of versions for the policy
  versions() []aws.iam.policyversion
  // default version of the policy
  defaultVersion() aws.iam.policyversion

  // list of users attached to the policy
  attachedUsers() []aws.iam.user
  // list of roles attached to the policy
  attachedRoles() []aws.iam.role
  // list of groups attached to the policy
  attachedGroups() []aws.iam.group
}

aws.iam.policyversion {
  // ARN of the policy version
  arn string
  // version id
  versionId string
  // denotes if this version is the policy default version
  isDefaultVersion bool
  // json statements for this policy version
  document() dict
  // time when this policy version was created
  createDate time
}

aws.iam.role {
  // ARN of the role
  arn string
  // id of the role
  id string
  // name of the role
  name string
  // description of the role
  description string
  // tags associated with the role
  tags map[string]string
  // time when the role was created
  createDate time
}

aws.iam.group {
  // ARN of the group
  arn string
  // id of the group
  id string
  // name of the group
  name string
  // time when the group was created
  createDate time
}

aws.iam.virtualmfadevice {
  // serial number for the mfa device
  serialNumber string
  // time when the mfa device was enabled
  enableDate time
  // user associated with the mfa device
  user aws.iam.user
}

aws.sns.topic {
  // SNS topic ARN
  arn string
  // region where the sns topic exists
  region string
  // list of subscriptions associated with the topic ARN
  subscriptions() []aws.sns.subscription 
}

aws.sns.subscription {
  // ARN of the subscription
  arn string
  // protocol value for the subscription
  protocol string
}

// aws service that provides observability of AWS resources and applications
aws.cloudwatch {
  // list of cloudwatch log groups
  logGroups() []aws.cloudwatch.loggroup
}

aws.cloudwatch.metricsalarm {
  // unique id for metric alarm
  id string
  // metric name associated with the alarm
  metricName string
  // metric namespace associated with the alarm
  metricNamespace string
  // region where the alarm exists
  region string
  // list of sns topic ARNs associated with the alarm
  snsTopics() []aws.sns.topic
}

aws.cloudwatch.loggroup {
  // ARN of the log group
  arn string
  // name of the log group
  name string
  // list of metric filters associated with the log group
  metricsFilters() []aws.cloudwatch.loggroup.metricsfilter
}

aws.cloudwatch.loggroup.metricsfilter {
  // unique id for the metric
  id string
  // filter name associated with metric
  filterName string
  // filter pattern associated with the metric
  filterPattern string
  // list of metric alarms
  metricAlarms []aws.cloudwatch.metricsalarm 
}

// aws service that enables risk auditing of your AWS account
aws.cloudtrail {
  // a list of cloudtrail trails associated with the account
  trails() []aws.cloudtrail.trail
}

aws.cloudtrail.trail {
  // ARN of the trail
  arn string
  // name of the trail
  name string
  // ARN of the KMS key id that encrypts the logs
  kmsKeyId string
  // specifies if trail exists only in one region or multiple
  isMultiRegionTrail bool
  // whether trail is organization trail (logs events for mgmt and member accts of org)
  isOrganizationTrail bool
  // whether log file validation is enabled
  logFileValidationEnabled bool
  // true if api calls from global services are included
  includeGlobalServiceEvents bool
  // s3 bucket where trail files are delivered
  s3bucket aws.s3.bucket
  // ARN of the SNS topic that the trail uses to send notifications
  snsTopicARN string
  // JSON list of information about the trail
  status() dict
  // ARN of log group to which trail files will be delivered
  cloudWatchLogsLogGroupArn string
  // role for logs endpoint to assume when writing to log group
  cloudWatchLogsRoleArn string
  // settings for the trail's configured event selectors
  eventSelectors() []dict
  // a list of log groups associated with the group name from cloudWatchLogsLogGroupArn
  logGroup() aws.cloudwatch.loggroup
  // region in which the trail was created (home region)
  region string
}

// aws service for key management
aws.kms {
  // a list of all customer master keys (CMKs) in the caller's AWS account (across all regions)
  keys() []aws.kms.key
}

aws.kms.key {
  // unique identifier for the key
  id string
  // arn of the key
  arn string
  // region the key lives in
  region string
  // bool that specifies whether key rotation is enabled
  keyRotationEnabled bool
}


// aws service for object storage
aws.s3 {
  // list of s3 buckets across the account
  buckets() []aws.s3.bucket
}

aws.s3control {
  // account level public access configuration for s3
  accountPublicAccessBlock() dict
}

// AWS S3 Bucket
aws.s3.bucket {
  // arn of the bucket
  arn string
  // name of the bucket
  name string
  // policy associated with the bucket
  policy() aws.s3.bucket.policy
  // tags for the bucket
  tags() map[string]string
  // list of access control grants associated with the bucket
  acl() []aws.s3.bucket.grant
  // owner for the bucket
  owner() map[string]string
  // denotes if bucket is public
  public() bool
  // list of cors information for the bucket
  cors() []aws.s3.bucket.corsrule
  // location of the bucket
  location() string
  // versioning state and mfa delete status of bucket
  versioning() map[string]string
  // logging status and user perms for bucket logging status
  logging() map[string]string
  // website configuration for a bucket
  staticWebsiteHosting() map[string]string
  // denotes whether bucket is locked by default
  defaultLock() string
  // bucket cross-region replication configuration
  replication() dict
  // bucket encryption configuration
  encryption() dict
  // public access block configuration for the bucket
  publicAccessBlock() dict
}

aws.s3.bucket.grant {
  // id of the bucket grant
  id string
  // name for the bucket grant
  name string
  // permission associated with the grant
  permission string
  // grantee associated with the grant
  grantee map[string]string
}

aws.s3.bucket.corsrule {
  // name of the rule
  name string
  // list of allowed headers
  allowedHeaders []string
  // list of allowed methods (GET, POST, PUT, etc.)
  allowedMethods []string
  // list of origins from which the bucket can be accessed
  allowedOrigins []string
  // list of exposed response headers  
  exposeHeaders []string
  // time in seconds that browser caches preflight response
  maxAgeSeconds int
}

aws.s3.bucket.policy {
  // name for the policy
  name string
  // document for the policy
  document string
  // version of the policy
  version() string
  // unique id for the policy
  id() string
  // list of statements for the policy
  statements() []dict
}

// AWS NoSQL database service for scale
aws.dynamodb {
  // list of backups for dynamodb
  backups() []dict
  // list of global tables for dynamodb
  globalTables() []aws.dynamodb.globaltable
  // list of tables for dynamodb
  tables() []aws.dynamodb.table
  // list of dynamodb settings across all regions
  limits() []aws.dynamodb.limit
}

aws.dynamodb.limit {
  // ARN representing the account + region where the limit applies 
  arn string
  // region where the limits apply
  region string
  // account max read limit
  accountMaxRead int
  // account max write limit
  accountMaxWrite int
  // table max read limit
  tableMaxRead int
  // table max write limit
  tableMaxWrite int
}

aws.dynamodb.globaltable {
  // ARN for the global table
  arn string
  // table name
  name string
  // list of replica settings for the table
  replicaSettings() []dict
}

aws.dynamodb.table {
  // ARN for the table
  arn string
  // table name
  name string
  // region where the table exists
  region string
  // backups for the table
  backups() []dict
}

// AWS service for creating, maintaining, and securing APIs at scale
aws.apigateway {
  // list of rest APIs across all regions in the account
  restApis() []aws.apigateway.restapi
}

aws.apigateway.restapi {
  // ARN for the rest api
  arn string
  // unique id for the rest api
  id string
  // name for the rest api
  name string
  // time when the rest api was created
  createdDate time
  // description for the rest api
  description string
  // stages for the rest api
  stages() []aws.apigateway.stage
  // region where the rest api exists
  region string
}

aws.apigateway.stage {
  // ARN for the rest api stage
  arn string
  // name for the stage
  name string
  // bool that denotes if tracing is enabled for the stage
  tracingEnabled bool
  // description for the stage
  description string
  // id of the deployment the stage is attached to
  deploymentId string
  // method settings for the stage
  methodSettings dict
}

// AWS serverless compute service for running code
aws.lambda {
  // list of lambda functions across all regions in the account
  functions() []aws.lambda.function
}

aws.lambda.function {
  // arn of the function
  arn string
  // name of the function
  name string
  // concurrency limit for the function
  concurrency() int
  // target ARN of the DeadLetterQueue config
  dlqTargetArn string
  // policy for the function
  policy() dict
  // vpc configuration for the lambda function
  vpcConfig dict
  // region where the function exists
  region string
}

aws.ec2 {
  // a list of security groups available to the account
  securityGroups() []aws.ec2.securitygroup 
  // a list of instances across the aws account (all regions)
  instances() []aws.ec2.instance
  // map[region]boolean used to denote if ebs encryption is on by default per region
  ebsEncryptionByDefault() map[string]bool
}

aws.ec2.instance {
  // arn for the instance
  arn string
  // instance id for the instance
  instanceId string
  // indicates whether detailed monitoring is enabled
  detailedMonitoring string
  // region where the instance exists
  region string
  // public ip for instance
  publicIp string
  // Amazon Systems Manager information for the instance
  ssm() dict
  // id of the vpc associated with the intance
  vpcId string
  // a value of optional for http tokens denotes imdsv1 server compatibility; required is imdsv2
  httpTokens string
  // patch state information about the instance
  patchState() dict
  // state of the instance
  state string
  // a list of devices attached to the instance (e.g. ebs volume)
  deviceMappings []aws.ec2.instance.device
  // a list of security groups (ids) associated with the instance
  securityGroups []aws.ec2.securitygroup
  // public dns name for the instance
  publicDnsName string
  // the status of the specified instance
  instanceStatus() dict
  // reason for the most recent state transition
  stateReason dict
  // reason for the most recent state transition
  stateTransitionReason string
}

aws.ec2.instance.device {
  // boolean to denote whether volume should be deleted on instance termination
  deleteOnTermination bool
  // status of the device
  status string
  // volume id for the device
  volumeId string
  // name for the device
  deviceName string
}

aws.vpc {
  // id of the vpc
  id string
  // state of the vpc (pending|available)
  state string
  // whether the vpc is the default one
  isDefault bool
  // region the vpc exists in
  region string
  // a list of flowlogs for the vpc
  flowLogs() []aws.vpc.flowlog
  // list of route tables for the vpc
  routeTables() []aws.vpc.routetable
}

aws.vpc.flowlog {
  // unique id of the flowlog
  id string
  // vpc the flowlog exists in
  vpc string
  // region the flowlog exists in
  region string
  // status of the flowlog
  status string
}

aws.vpc.routetable {
  // unique id of the route table
  id string
  // a list of route descriptions
  routes []dict
}

aws.ec2.securitygroup {
  // security group arn
  arn string
  // security group id
  id string
  // name of the security group
  name string
  // description of the secuirty group
  description string
  // a map of tags associated with the security group
  tag map[string]string
  // id of the vpc associated with the security group
  vpcid string
  // ip permissions (ingress) for the security group
  ipPermissions []aws.ec2.securitygroup.ippermission
  // ip permissions (egress) for the security group
  ipPermissionsEgress []aws.ec2.securitygroup.ippermission
  // region associated with the security group
  region string
  // bool to denote if security group is attached to Amazon Elastic Compute Cloud
  isAttachedToNetworkInterface() bool
}

aws.ec2.securitygroup.ippermission {
  // unique id for the ip permission
  id string
  // start of port range for tcp/udp protocols
  fromPort int
  // end of port range for tcp/udp protocols
  toPort int
  // ip protocol name
  ipProtocol string
  // ipv4 ranges
  ipRanges []string
  // ipv6 ranges
  ipv6Ranges []string
}

aws.config {
  // list of configuration recorders for each region in the account
  recorders() []aws.config.recorder
}

aws.config.recorder {
  // name of the recorder
  name string
  // arn of the IAM role used to describe the AWS resources associated with the account
  roleArn string
  // recording config changes for every supported type of regional resource
  allSupported bool
  // recording all supported types of global resources with the resources that it records
  includeGlobalResourceTypes bool
  // whether or not the recorder is currently recording
  recording bool
  // last (previous) status of the recorder
  lastStatus string
  // region for the recorder
  region string
}

gcloud.organization {
  id() string
  name() string
  lifecycleState() string
  iamPolicy() []gcloud.resourcemanager.binding
}

gcloud.project {
  id() string
  name() string
  number() string
  lifecycleState() string
  createTime() time
  labels() map[string]string
  iamPolicy() []gcloud.resourcemanager.binding
}

gcloud.resourcemanager.binding {
  id string
  members []string
  role string
}

gcloud.compute {
  instances() []gcloud.compute.instance
}

gcloud.compute.instance {
  id string
  name string
  cpuPlatform string
  deletionProtection bool
  description string
  hostname string
  labels map[string]string
  status string
  statusMessage string
  tags []string
  metadata map[string]string
  serviceAccounts []gcloud.compute.serviceaccount
}

gcloud.compute.serviceaccount {
  email string
  scopes []string
}

gcloud.storage {
  buckets() []gcloud.storage.bucket
}

gcloud.storage.bucket {
  id string
  name string
  kind string
  labels map[string]string
  location string
  locationType string
  projectNumber string
  storageClass string
  created time
  updated time
  iamPolicy() []gcloud.resourcemanager.binding
  iamConfiguration dict
}

gcloud.sql {
  instances() []gcloud.sql.instance
}

gcloud.sql.instance {
  name string
  backendType string
  connectionName string
  databaseVersion string
  gceZone string
  instanceType string
  kind string
  currentDiskSize int
  maxDiskSize int
  state string
  project string
  region string
  serviceAccountEmailAddress string
  settings dict
}

azuread {
  users() []azuread.user
  groups() []azuread.group
  domains() []azuread.domain
  applications() []azuread.application
  servicePrincipals() []azuread.serviceprincipal
}

azuread.user {
  id string
  displayName string
  givenName string
  surname string
  userPrincipalName string
  accountEnabled bool
  mailNickname string
  mail string
  objectType string
  userType string
  properties dict
}

azuread.group {
  id string
  displayName string
  securityEnabled bool
  mailEnabled bool
  mailNickname string
  mail string
  objectType string
  properties dict
  members() []azuread.user
}

azuread.domain {
  name string
  isVerified bool
  isDefault bool
  authenticationType string
  properties dict
}

azuread.application {
  id string
}

azuread.serviceprincipal {
  id string
}

azurerm {
  resources() []azurerm.resource
}

azurerm.resource {
  id string
  name string
  kind string
  location string
  tags map[string]string
  type string

  managedBy string
  sku dict
  plan dict
  identity dict

  provisioningState string
  createdTime time
  changedTime time
}

azurerm.compute {
  vms() []azurerm.compute.vm
  // lists all the disks under a subscription
  disks() []azurerm.compute.disk
}

azurerm.compute.vm {
  id string
  name string
  location string
  tags map[string]string
  type string
  properties dict
  extensions() []dict
  osDisk() azurerm.compute.disk
  dataDisks() []azurerm.compute.disk
}

// Azure disk resource
azurerm.compute.disk {
  // Disk resource id
  id string
  // Disk resource name
  name string
  // Disk resource location
  location string
  // Disk resource tags
  tags map[string]string
  // Disk resource type
  type string
  // A relative URI containing the ID of the VM that has the disk attached
  managedBy string
  // List of relative URIs containing the IDs of the VMs that have the disk attached
  managedByExtended []string
  // The logical zone list for disk
  zones []string
  // The disk sku name and tier
  sku dict
  // Disk resource properties
  properties dict
}

azurerm.network {
  interfaces() []azurerm.network.interface
  securityGroups() []azurerm.network.securitygroup
  watchers() []azurerm.network.watcher
}

azurerm.network.interface {
  id string
  name string
  location string
  tags map[string]string
  type string
  etag string
  properties dict
  vm() azurerm.compute.vm
}

azurerm.network.securitygroup {
  id string
  name string
  location string
  tags map[string]string
  type string
  etag string
  properties dict
  interfaces []azure.network.interface
	securityRules []azurerm.network.securityrule
  defaultSecurityRules []azurerm.network.securityrule
}

azurerm.network.securityrule {
  id string
  name string
  etag string
  properties dict
  destinationPortRange []dict
}

azurerm.network.watcher {
  id string
  name string
  location string
  tags map[string]string
  type string
  etag string
  properties dict
}

azurerm.storage {
  accounts() []azurerm.storage.account
}

azurerm.storage.account {
  id string
  name string
  location string
  tags map[string]string
  type string
  properties dict
  identity dict
  sku dict
  kind string
  containers() []azurerm.storage.container
}

azurerm.storage.container {
  id string
  name string
  type string
  etag string
  properties dict
}

azurerm.web {
  apps() []azurerm.web.appsite
  availableRuntimes() []dict
}

azurerm.web.appsite {
  id string
  name string
  kind string
  location string
  type string
  tags map[string]string
  properties dict
  identity dict

  configuration() azurerm.web.appsiteconfig
  authenticationSettings() azurerm.web.appsiteauthsettings
  metadata() dict
  applicationSettings() dict
  connectionSettings() dict
  stack() dict
}

azurerm.web.appsiteauthsettings {
  id string
  name string
  kind string
  type string
  properties dict
}

azurerm.web.appsiteconfig {
  id string
  name string
  kind string
  type string
  properties dict
}

azurerm.sql {
  servers() []azurerm.sql.server
}

azurerm.sql.server {
  id string
  name string
  location string
  tags map[string]string
  type string
  properties dict
  databases() []azurerm.sql.database
  firewallRules() []azurerm.sql.firewallrule
  azureAdAdministrators() []azurerm.sql.server.administrator
  connectionPolicy() dict
  auditingPolicy() dict
  securityAlertPolicy() dict
  encryptionProtector() dict
}

azurerm.sql.server.administrator {
  id string
  name string
  type string
  administratorType string
  login string
  sid string
  tenantId string
}

azurerm.sql.database {
  id string
  name string
  type string
  collation string
  creationDate time
  containmentState int
  currentServiceObjectiveId string
  databaseId string
  earliestRestoreDate time
  createMode string
  sourceDatabaseId string
  sourceDatabaseDeletionDate time
  restorePointInTime time
  recoveryServicesRecoveryPointResourceId string
  edition string
  maxSizeBytes string
  requestedServiceObjectiveId string
  requestedServiceObjectiveName string
  serviceLevelObjective string
  status string
  elasticPoolName string
  defaultSecondaryLocation string
  serviceTierAdvisors dict
  recommendedIndex dict
  failoverGroupId string
  readScale string
  sampleName string
  zoneRedundant bool

  transparentDataEncryption() dict
  advisor() []dict
  threadDetectionPolicy() dict
  connectionPolicy() dict
  auditingPolicy() dict
  usage() []azurerm.sql.databaseusage
}

azurerm.sql.databaseusage {
  id string
  name string
  resourceName string
  displayName string
  currentValue float
  limit float
  unit string
  nextResetTime time
}

azurerm.postgresql {
   servers() []azurerm.postgresql.server
}

azurerm.postgresql.server {
  id string
  name string
  location string
  tags map[string]string
  type string
  properties dict
  configuration() []azurerm.sql.configuration
  databases() []azurerm.postgresql.database
  firewallRules() []azurerm.sql.firewallrule
}

azurerm.postgresql.database {
  id string
  name string
  type string
  charset string
  collation string
}

azurerm.mysql {
  servers() []azurerm.mysql.server
}

azurerm.mysql.server {
  id string
  name string
  location string
  tags map[string]string
  type string
  properties dict
  configuration() []azurerm.sql.configuration
  databases() []azurerm.mysql.database
  firewallRules() []azurerm.sql.firewallrule
}

azurerm.mysql.database {
  id string
  name string
  type string
  charset string
  collation string
}

azurerm.mariadb {
  servers() []azurerm.mariadb.server
}

azurerm.mariadb.server {
  id string
  name string
  location string
  tags map[string]string
  type string
  properties dict
  configuration() []azurerm.sql.configuration
  databases() []azurerm.mariadb.database
  firewallRules() []azurerm.sql.firewallrule
}

azurerm.mariadb.database {
  id string
  name string
  type string
  charset string
  collation string
}

azurerm.sql.configuration {
  id string
  name string
  type string
  value string
  description string
  defaultValue string
  dataType string
  allowedValues string
  source string
}

azurerm.sql.firewallrule {
  id string
  name string
  type string
  startIpAddress string
  endIpAddress string
}

azurerm.keyvault {
  vaults() []azurerm.keyvault.vault
}

azurerm.keyvault.vault {
  id string
  vaultName string
  type string
  location string
  tags map[string]string

  vaultUri() string
  properties() dict

  keys() []azurerm.keyvault.key
  certificates() []azurerm.keyvault.certificate
  secrets() []azurerm.keyvault.secret
  diagnosticSettings() []azurerm.monitor.diagnosticsetting
}

azurerm.keyvault.key {
  kid string
  tags map[string]string
  managed bool

  enabled bool
  notBefore time
  expires time
  created time
  updated time
  recoveryLevel string

  keyName() string
  version() string
  versions() []azurerm.keyvault.key
}

azurerm.keyvault.certificate {
  id string
  tags map[string]string
  x5t string

  enabled bool
  notBefore time
  expires time
  created time
  updated time
  recoveryLevel string

  certName() string
  version() string
  versions() []azurerm.keyvault.certificate
}

azurerm.keyvault.secret {
  id string
  tags map[string]string
  contentType string
  managed bool

  enabled bool
  notBefore time
  expires time
  created time
  updated time

  secretName() string
  version() string
  versions() []azurerm.keyvault.secret
}

azurerm.monitor {
  logProfiles() []azurerm.monitor.logprofile
}

azurerm.monitor.logprofile {
  id string
  name string
  location string
  type string
  tags map[string]string
  properties dict
  storageAccount azurerm.storage.account
}

azurerm.monitor.diagnosticsetting {
  id string
  name string
  type string
  properties dict
  storageAccount azurerm.storage.account
}

msgraph.beta.security {
  secureScores() []msgraph.beta.security.securityscore
  latestSecureScores() msgraph.beta.security.securityscore
}

msgraph.beta.security.securityscore {
  id string
  activeUserCount int
  averageComparativeScores []dict
  azureTenantId string
  controlScores []dict
  createdDateTime time
  currentScore float
  enabledServices []string
  licensedUserCount int
  maxScore float
  vendorInformation dict
}


// Windows-specific resource to get operating system details
windows {
  // Gets a consolidated object of system and operating system properties
  // 
  // see https://docs.microsoft.com/en-us/dotnet/api/microsoft.powershell.commands.computerinfo?view=powershellsdk-1.1.0 for more information
  computerInfo() dict

  // Gets the hotfixes that are installed on the computer
  hotfixes() []windows.hotfix

  // Gets information about Windows Server roles, role services, and features that are available for installation and installed on a specified server.
  features() []windows.feature
}

// Windows hotfix resource
windows.hotfix {
  init(hotfixId string)
  // hotfix id
  hotfixId string
  // type of hotfix eg. `Update` or `Security Update`
  description string
  // reference to knowledge base
  caption string
  // date the hotfix was installed on
  installedOn time
  // user that installed the hotfix
  installedBy string
}

// Windows feature resource
windows.feature {
  init(name string)
  // feature full path 
  path string
  // command IDs of role, role service, or feature
  name string
  // feature name
  displayName string
  // feature description
  description string
  // flag indicates whether the feature is installed
  installed bool
  // feature installation state
  installState int
}

// Windows firewall resource
windows.firewall {
  // global firewall settings
  settings() dict

  // settings that apply to the per-profile configurations of the Windows Firewall with Advanced Security
  profiles() []windows.firewall.profile

  // firewall rules
  rules() []windows.firewall.rule
}

// windows firewall profile entry
// https://docs.microsoft.com/en-us/previous-versions/windows/desktop/wfascimprov/msft-netfirewallprofile
windows.firewall.profile {
  instanceID string
  // name of the profile
  name string
  // whether the firewall is enabled on this profile
  enabled int
  // default action for inbound traffic
  defaultInboundAction int
  // default action for outbound traffic
  defaultOutboundAction int
  // if this is true, administrators will be able to create firewall rules which allow unsolicited inbound traffic to be accepted if this is false, such rules will be ignored
  allowInboundRules int
  // determines whether local firewall rules should be merged into the effective policy along with group policy settings
  allowLocalFirewallRules int
  // determines whether local IPsec rules should be merged into the effective policy along with rules from group policy
  allowLocalIPsecRules int
  // whether to respect user allowed applications created in the legacy firewall
  allowUserApps int
  // whether to respect globally opened ports created in the legacy firewall
  allowUserPorts int
  // whether to allow unicast responses to multicast traffic
  allowUnicastResponseToMulticast int
  // if true, users will be notified when an application listens on a port that is close
  notifyOnListen int
  // whether to use stealth mode for IPsec-protected traffic
  enableStealthModeForIPsec int
  // maximum size the log file can reach before being rotated
  logMaxSizeKilobytes int
  // whether to log allowed packets
  logAllowed int
  // whether to log blocked traffic
  logBlocked int
  // whether to log an event when rules are ignored
  logIgnored int
  // lfilename in which to store the firewall log
  logFileName string
}

// windows firewall rule entry
// https://docs.microsoft.com/en-us/previous-versions/windows/desktop/wfascimprov/msft-netfirewallrule
windows.firewall.rule {
  // a string that uniquely identifies this instance within the PolicyStore
  instanceID string
  // name of the rule
  name string
  // localized name of this rule
  displayName string
  // brief description of the rule
  description string
  // the group that this rule belongs to
  displayGroup string
  // indicates whether this rule is administratively enabled or disabled
  // values: enabled (1), disabled (2)
  enabled int
  // specifies which direction of traffic to match with this rule
  // values: inbound (1), outbound (2)
  direction int
  // specifies the action to take on traffic that matches this rule
  action int
  // specifies how this firewall rule will handle edge traversal cases
  // values: block (0), allow (1), defer to user (2), defer to app (3)
  edgeTraversalPolicy int
  // whether to group UDP packets into conversations based upon the local address, local port, and remote port
  looseSourceMapping bool
  // whether to group UDP packets into conversations based only upon the local address and port
  localOnlyMapping bool
  // PrimaryStatus provides a high level status value
  // values: unknown (0), ok (1), degraded (2), error (3)
  primaryStatus int
  // detailed status of the rule
  status string
  // if this object is retrieved from the ActiveStore
  enforcementStatus string
  // contains the path to the policy store where this rule originally came from
  policyStoreSource string
  // describes the type of policy store where this rule originally came from
  policyStoreSourceType int
}

yum {
  vars() map[string]string
  repos() []yum.repo
}

yum.repo {
  init(id string)
  id string
  name string
  status string
  baseurl []string
  expire string
  filename string
  revision string
  pkgs string
  size string
  mirrors string
  enabled() bool
}

// Intelligent Platform Management Interface (IPMI) resource
//
// Provides access to BIOS and UEFI configuration
ipmi {
  // retrieve the hardware & firmware revision and sensor and event interface
  deviceID() dict
  // GUID (Globally Unique ID) for management controller
  guid() string
}

// IPMI system chassis resource
ipmi.chassis {
  // high-level status of the system chassis and main power subsystem
  status() dict
  // retrieve the system boot options
  systemBootOptions() dict
}