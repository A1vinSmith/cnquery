// Provide contextual info about the mondoo client and environment
mondoo {
  // Version of mondoo the client is running
  version() string
  // The build of the mondoo client (e.g. production, development)
  build() string
  // All resources supported by the language
  resources() []string
}

// Parse provides common parsers (json, ini, certs, etc)
parse {
  // Builtin functions:
  // Date(value, format) time
}

// Date and time functions
time {
  // The current time on the local system
  now() time
  // One second, used for durations
  second() time
  // One minute, used for durations
  minute() time
  // One hour, used for durations
  hour() time
  // One day, used for durations
  day() time
}

// Parse INI files
parse.ini {
  init(path string, delimiter string)
  // Symbol that is separating keys and values
  delimiter() string
  // File that is being parsed
  file() file
  // Raw content of the file that is parsed
  content(file) string
  // A map of sections and key-value pairs
  sections(content, delimiter) map[string]map[string]string
  // A map of parameters that don't belong to sections
  params(sections) map[string]string
}

// Parse JSON files
parse.json {
  init(path string)
  // File that is being parsed
  file() file
  // Raw content of the file that is parsed
  content(file) string
  // The parsed parameters that are defined in this file
  params(content) dict
}

// Common platform information (OS, API, Service)
platform {
  // Name of the platform or OS
  name string
  // Human-readable name of the platform or OS
  title string
  // List of platform families that we belong to
  family []string
  // Release or version of the platform or OS
  release string
  // Architecture this OS is running on
  arch string
  // Kind of this platform (API, code, image, package, etc)
  kind string
  // Contextual information about the runtime (bare-metal, cloud, container, etc)
  // TODO: rename to runtime
  execenv string
}

// Results of running a command on the system
command {
  init(command string)
  // Raw contents of the command
  command string
  // Standard output from running the command
  stdout() string
  // Standard error output from running the command
  stderr() string
  // Exit code the command returned
  exitcode() int
}

// Results of running a powershell script on the system
powershell {
  init(script string)
  // Raw contents of the script
  script string
  // Standard output from running the script
  stdout() string
  // Standard error output from running the script
  stderr() string
  // Exit code the script returned
  exitcode() int
}

// File on the system
file {
  init(path string)
  // Location of the file on the system
  path string
  // Filename without path prefix of this file
  basename(path) string
  // Path to the folder containing this file
  dirname(path) string
  // Contents of this file
  content(path, exists) string
  // Indicator if this file exists on the system
  exists() bool
  // Permissions for this file
  permissions() file.permissions
  // Size of this file on disk
  size() int
  // Ownership information about the user
  user() user
  // Ownership information about the group
  group() group
}

// Access permissions for a given file
file.permissions {
  // Raw POSIX mode for the permissions
  mode int
  // Indicator if this file is readable by its owner
  user_readable bool
  // Indicator if this file is writeable by its owner
  user_writeable bool
  // Indicator if this file is executable by its owner
  user_executable bool
  // Indicator if this file is readable by members of the group
  group_readable bool
  // Indicator if this file is writeable by members of the group
  group_writeable bool
  // Indicator if this file is executable by members of the group
  group_executable bool
  // Indicator if this file is readable by others
  other_readable bool
  // Indicator if this file is writeable by others
  other_writeable bool
  // Indicator if this file is executable by others
  other_executable bool
  // SUID bit indicator
  suid bool
  // SGID bit indicator
  sgid bool
  // Sticky bit indicator
  sticky bool
}

// Find files on the system efficiently
files.find {
  []file
  // From sets the starting point for the search operation
  from string
  // xdev indicates if other devices will be searched
  xdev() bool
  // What types of files will be listed (directories, files, devices, etc)
  type() string
  // A regular expression for the file search
  regex() string
  // What permissions the file matches
  permissions() int
  // Search name of the name
  name() string
}

// PAM configuration (Pluggable Authentication Module)
pam.conf {
  init(path string)
  // A list of files that make up the PAM configuration
  files() []file
  // The raw PAM configuration (across all files)
  content(files) string
  // A list of services that are configured via PAM
  services(files) map[string][]string
}

// SSH server resource
sshd {}

// SSH server configuration
sshd.config {
  init(path string)
  // File of this SSH server configuration
  file() file
  // Raw content of this SSH server config
  content(file) string
  // Configuration values of this SSH server
  params(content) map[string]string
  // Ciphers configured for this SSH server
  ciphers(params) []string
  // MACs configured for this SSH server
  macs(params) []string
  // Key Exchange Algorithms configured for this SSH server
  kexs(params) []string
}

// Package on the platform or OS
package {
  init(name string)

  // Name of the package
  name string
  // Current version of the package
  version string
  // Architecture of this package
  arch string
  // Epoch of this package
  epoch string

  // Format of this package (e.g. rpm, deb)
  format string
  // Status of this package (e.g. if it is needed)
  status() string
  // Package description
  description string

  // Available version
  available string
  // Indicates if this package is installed
  installed bool
  // Indicates if this package is outdated
  outdated() bool
}

// List of packages on this system
packages {
  []package
}

// Kernel information for this OS
kernel {
  // Kernel parameters map
  parameters() map[string]string
  // List of kernel modules
  modules() []kernel.module
}

// Kernel module information
kernel.module {
  init(name string)

  // Name of the kernel module
  name string
  // Size of the kernel module
  size string
  // Indicates if this module is loaded
  loaded bool
}

// NTP service configuration
ntp.conf {
  init(path string)
  // File of this NTP service configuration
  file() file
  // Raw contents of this NTP service configuration
  content(file) string
  // List of settings for this NTP service
  settings(content) []string
  // List of servers for this NTP service
  servers(settings) []string
  // List of access control restrictions for this NTP service
  restrict(settings) []string
  // Additional information for clock drivers
  fudge(settings) []string
}

// Rsyslog service configuration
rsyslog.conf {
  init(path string)
  // Files that make up this Rsyslog service configuration
  files() []file
  // Raw contents of this Rsyslog service configuration
  content(files) string
  // List of settings for this Rsyslog service
  settings(content) []string
}

// Operating System information
os {
  // ENV variable contents
  env() map[string]string
  // PATH variable contents
  path() []string
  // Current uptime
  uptime() string
  // List of available OS updates
  updates() []os.update
  // Indicates if a reboot is pending
  rebootpending() bool
  // Hostname for this OS
  hostname() string
  // Machine ID for this OS
  machineid() string
}

// Operating System update information
os.update {
  // Name of the update
  name string
  // Category of the update
  category string
  // Severity of the update
  severity string
  // Indicates if a restart is required
  restart bool
  // Package format for this update
  format string
}

// Operating System root certificates
os.rootcertificates {
  []certificate(content)
  // List of files that define these certificates
  files() []file
  content(files) []string
}

// Process on this system
process {
  init(pid int)
  // PID (process ID)
  pid int
  // State of the process (sleeping, running, etc)
  state() string
  // Executable that is running this process
  executable() string
  // Full command used to run this process
  command() string
  // Map of additional flags
  flags() map[string]string
}

// Processes available on this system
processes {
  []process
}

// User on this system
user {
  // User ID
  uid int
  // User's Group ID
  gid int
  // User's Security Identifier (Windows)
  sid string
  // Name of the user
  name string
  // Home folder
  home string
  // Default shell configured
  shell string
  // Indicates if the user is enabled
  enabled bool
  // List of authorized keys
  authorizedkeys() authorizedkeys
  // List of SSH keys
  sshkeys() []privatekey
}

// Users configured on this system
users {
  []user
}

// Service on this system
service {
  init(name string)
  // Name of this service
  name string
  // Service description
  description() string
  // Is it installed?
  installed() bool
  // Is it running?
  running() bool
  // Is it enabled? (start at boot)
  enabled() bool
  // Type information
  type() string
}

// Services configured on this system
services {
  []service
}

// Group on this system
group {
  init(id string)
  // Group ID
  gid int
  // Group's Security Identifier (Windows)
  sid string
  // Name of this group
  name string
  // Users who are members of this group
  members() []user
}

// Groups configured on this system
groups {
  []group
}

docker {
  images() []docker.image
  container() []docker.container
}

docker.image {
  id string
  size int
  virtualsize int
  tags []string
  labels map[string]string
}

docker.container {
  id string
  command string
  image string
  imageid string
  names []string
  state string
  status string
  labels map[string]string
}

auditpol {
  []auditpol.entry
}

auditpol.entry {
  machinename      string
	policytarget     string
	subcategory      string
	subcategoryguid  string
	inclusionsetting string
	exclusionsetting string
}

secpol {
  systemaccess() map[string]string
  eventaudit() map[string]string
  registryvalues() map[string]string
  privilegerights() map[string][]string
}

logindefs {
  init(path string)
  file() file
  content(file) string
  params(content) map[string]string
}

mount {
  []mount.point
}

mount.point {
  device string
  path string
  fstype string
  options map[string]string
}

shadow {
  []shadow.entry
}

shadow.entry {
  user string
  password string
  lastchanges string
  mindays string
  maxdays string
  warndays string
  inactivedays string
  expirydates string
  reserved string
}

registrykey {
  init(path string)
  path string
  exists() bool
  properties() map[string]string
  children() []string
}

registrykey.property {
  init(path string, name string)
  path string
  name string
  value() string
  exists() bool
}

yaml.path {
  filepath string
  jsonpath string
  result() string
}

authorizedkeys {
  []authorizedkeys.entry(file, content)
  init(path string)
  path string
  file() file
  content(file) string
}

authorizedkeys.entry {
  line int
  type string
  key string
  label() string
  options() []string
  file file
}

parse.certificates {
  []certificate(content, path)
  init(path string)
  path string
  file() file
  content(file) string
}

pkix.name {
  id string
  dn string
  serialnumber string
  commonname string
  country []string
  organization []string
  organizationalunit []string
	locality []string
  province []string
	streetaddress []string
  postalcode []string
	names      map[string]string
	extranames map[string]string
}

pkix.extension {
  identifier string
  critical bool
  value string
}

certificate {
  pem string
  hashs() map[string]string
  serial() string
  subjectkeyid() string
  authoritykeyid() string
  subject() pkix.name
  issuer() pkix.name
  version() int
  notbefore() int
  notafter() int
  signature() string
  signingalgorithm() string
  isca() bool
  keyusage() []string
  extendedkeyusage() []string
  extensions() []pkix.extension
  policyidentifier() []string
  crldistributionpoints() []string
  ocspserver() []string
  issuingcertificateurl() []string
}

privatekey {
  pem string
  path() string
  encrypted() bool
}

// VMware vSphere resource
vsphere {
  licenses() []vsphere.license
  datacenters() []vsphere.datacenter
}

// vSphere license information
vsphere.license {
  name string
  total int
  used int
}

esxi {
  host() vsphere.host
  vm() vsphere.vm
}

// vSphere datacenter inventory
vsphere.datacenter {
  moid string
  name string
  inventoryPath string
  hosts() []vsphere.host
  vms() []vsphere.vm
  clusters() []vsphere.cluster
}

// vSphere cluster resource
vsphere.cluster {
  moid string
  name string
  inventoryPath string
  properties dict
  hosts() []vsphere.host
}

// vSphere host resource
vsphere.host {
  moid string
  name string
  inventoryPath string
  properties dict
  standardSwitch() []vsphere.vswitch
  distributedSwitch() []vsphere.vswitch
  adapters() []vsphere.vmnic
  vmknics() []vsphere.vmknic
  packages() []esxi.vib
  acceptanceLevel() string
  kernelModules() []esxi.kernelmodule
  advancedSettings() map[string]string
  services() []esxi.service
  timezone() esxi.timezone
  ntp() esxi.ntpconfig
  snmp() map[string]string
}

// vSphere VM resource
vsphere.vm {
  moid string
  name string
  inventoryPath string
  properties dict
  advancedSettings() map[string]string
}

// vSphere virtual switch resource
vsphere.vswitch {
  name string
  properties dict
}

vsphere.vmnic {
  name string
  properties dict
  pauseParams dict
}

vsphere.vmknic {
  name string
  properties dict
  ipv4 dict
  ipv6 dict
}

esxi.vib {
  id string
	name string
	acceptanceLevel string
	creationDate time
	installDate time
	status string
	vendor string
	version string
}

esxi.kernelmodule {
	name string
	modulefile string
	version string
	loaded bool
  enabled bool
  signedStatus string
	signatureDigest string
	signatureFingerprint string
  vibAcceptanceLevel string
}

esxi.service {
  key string
  label string
  required bool
  uninstallable bool
  running bool
  ruleset []string
  policy string
}

esxi.timezone {
  key string
  name string
  description string
  offset int
}

esxi.ntpconfig {
  id string
  server []string
  config []string
}

arista.eos {
  systemConfig() map[string]string
  ipInterfaces() []arista.eos.ipInterface
  interfaces() []arista.eos.interface
  version() dict
  hostname() string
  fqdn() string
  users() []arista.eos.user
  roles() []arista.eos.role
  snmp() arista.eos.snmpSetting
  ntp() arista.eos.ntpSetting
}

arista.eos.runningConfig {
  content() string
}

arista.eos.runningConfig.section {
  name string
  content() string
}

arista.eos.user {
  name string
  privilege string
  role string
  nopassword string
  format string
  secret string
  sshkey string
}

arista.eos.role {
  name string
  default bool
  rules []dict
}

arista.eos.snmpSetting {
  enabled bool
  notifications() []dict
}

arista.eos.ntpSetting {
  status string
}

arista.eos.interface {
  name string
  bandwidth int
  burnedInAddress string
  description string
  forwardingModel string
  hardware string
  interfaceAddress []dict
  interfaceCounters dict
  interfaceMembership string
  interfaceStatistics dict
  interfaceStatus string
  l2Mtu int
  lastStatusChangeTimestamp int
  lineProtocolStatus string
  mtu int
  physicalAddress string
  status() dict
}

arista.eos.ipInterface {
  name string
  address string
  mtu string
}

arista.eos.stp {
  mstInstances() []arista.eos.stp.mst
}

arista.eos.stp.mst {
  instanceId string
  name string
  protocol string
  bridge dict
  rootBridge dict
  regionalRootBridge dict
  interfaces []arista.eos.spt.mstInterface
}

arista.eos.spt.mstInterface {
  id string
  mstInstanceId string
  name string
  priority int
  linkType string
  state string
  cost int
  role string
  inconsistentFeatures dict
  portNumber int
  isEdgePort bool
  detail dict
  boundaryType string
  counters() dict
  features() dict
}

aws.iam {
  users() []aws.iam.user
  roles() []aws.iam.role
  groups() []aws.iam.group
  policies() []aws.iam.policy
  credentialReport() []aws.iam.usercredentialreportentry
  accountPasswordPolicy() map[string]string
  accountSummary() map[string]int
  virtualMfaDevices() []aws.iam.virtualmfadevice
}

aws.iam.usercredentialreportentry {
  init(properties map[string]string)
  properties map[string]string

  arn() string

  accessKey1Active() bool
  accessKey1LastRotated() time
  accessKey1LastUsedDate() time
  accessKey1LastUsedRegion() string
  accessKey1LastUsedService() string

  accessKey2Active() bool
  accessKey2LastRotated() time
  accessKey2LastUsedDate() time
  accessKey2LastUsedRegion() string
  accessKey2LastUsedService() string

  cert1Active() bool
  cert1LastRotated() time

  cert2Active() bool
  cert2LastRotated() time

  mfaActive() bool
  passwordEnabled() bool
  passwordLastChanged() time
  passwordLastUsed() time
  passwordNextRotation() time

  user() aws.iam.user
  userCreationTime() time
}

aws.iam.user {
  arn string
  id string
  name string
  createDate time
  passwordLastUsed time
  tags map[string]string
  policies() []string
  attachedPolicies() []aws.iam.policy
}

aws.iam.policy {
  arn string
  id() string
  name() string
  description() string
  isAttachable() bool
  attachmentCount() int
  createDate() time
  updateDate() time
  scope() string
  versions() []aws.iam.policyversion

  attachedUsers() []aws.iam.user
  attachedRoles() []aws.iam.role
  attachedGroups() []aws.iam.group
}

aws.iam.policyversion {
  arn string
  versionId string
  isDefaultVersion bool
  document() string
  createDate time
}

aws.iam.role {
  arn string
  id string
  name string
  description string
  tags map[string]string
  createDate time
}

aws.iam.group {
  arn string
  id string
  name string
  createDate time
}

aws.iam.virtualmfadevice {
  serialNumber string
  enableDate time
  user aws.iam.user
}

aws.cloudtrail {
  trails() []aws.cloudtrail.trail
}

aws.cloudtrail.trail {
  arn string
  name string
  kmsKeyId string
  isMultiRegionTrail bool
  isOrganizationTrail bool
  logFileValidationEnabled bool
  includeGlobalServiceEvents bool
  s3bucket aws.s3.bucket
  snsTopicARN string
  status() aws.cloudtrail.trailstatus
  cloudWatchLogsLogGroupArn string
  cloudWatchLogsRoleArn string
}

aws.cloudtrail.trailstatus {
  arn string
  isLogging bool
  latestCloudWatchLogsDeliveryError string
  latestCloudWatchLogsDeliveryTime time
  latestDeliveryError string
  latestDeliveryTime time
  latestDigestDeliveryError string
  latestDigestDeliveryTime time
  latestNotificationError string
  latestNotificationTime time
  startLoggingTime time
  stopLoggingTime time
}

aws.s3 {
  buckets() []aws.s3.bucket
}

aws.s3.bucket {
  name string
  policy() aws.s3.bucket.policy
  tags() map[string]string
  acl() []aws.s3.bucket.grant
  owner() map[string]string
  public() bool
  cors() []aws.s3.bucket.corsrule
  location() string
  versioning() map[string]string
  logging() map[string]string
  staticWebsiteHosting() map[string]string
}

aws.s3.bucket.grant {
  id string
  name string
  permission string
  grantee map[string]string
}

aws.s3.bucket.corsrule {
  name string
  allowedHeaders []string
  allowedMethods []string
  allowedOrigins []string
  exposeHeaders []string
  maxAgeSeconds int
}

aws.s3.bucket.policy {
  name string
  document string
  version() string
  id() string
  statements() []aws.s3.bucket.policystatement
}

aws.s3.bucket.policystatement {
  id string
  sid string
  effect string
  principal map[string][]string
  notPrincipal map[string][]string
  action []string
  notAction []string
  grantResource []string
  denyResource []string
  condition string
}

aws.ec2 {
  securityGroups() []aws.ec2.securitygroup
}

aws.ec2.securitygroup {
  id string
  name string
  description string
  tag map[string]string
  vpcid string
  ipPermissions []aws.ec2.securitygroup.ippermission
  ipPermissionsEgress []aws.ec2.securitygroup.ippermission
}

aws.ec2.securitygroup.ippermission {
  id string
  fromPort int
  toPort int
  ipProtocol string
  ipRanges []string
  ipv6Ranges []string
}

gcloud.organization {
  id() string
  name() string
  lifecycleState() string
  iamPolicy() []gcloud.resourcemanager.binding
}

gcloud.project {
  id() string
  name() string
  number() string
  lifecycleState() string
  createTime() time
  labels() map[string]string
  iamPolicy() []gcloud.resourcemanager.binding
}

gcloud.resourcemanager.binding {
  id string
  members []string
  role string
}

gcloud.compute {
  instances() []gcloud.compute.instance
}

gcloud.compute.instance {
  id string
  name string
  cpuPlatform string
  deletionProtection bool
  description string
  hostname string
  labels map[string]string
  status string
  statusMessage string
  tags []string
  metadata map[string]string
  serviceAccounts []gcloud.compute.serviceaccount
}

gcloud.compute.serviceaccount {
  email string
  scopes []string
}

gcloud.storage {
  buckets() []gcloud.storage.bucket
}

gcloud.storage.bucket {
  id string
  name string
  kind string
  labels map[string]string
  location string
  locationType string
  projectNumber string
  storageClass string
  created time
  updated time
  iamPolicy() []gcloud.resourcemanager.binding
  iamConfiguration dict
}

gcloud.sql {
  instances() []gcloud.sql.instance
}

gcloud.sql.instance {
  name string
  backendType string
  connectionName string
  databaseVersion string
  gceZone string
  instanceType string
  kind string
  currentDiskSize int
  maxDiskSize int
  state string
  project string
  region string
  serviceAccountEmailAddress string
  settings dict
}

azuread {
  users() []azuread.user
  groups() []azuread.group
  domains() []azuread.domain
  applications() []azuread.application
  servicePrincipals() []azuread.serviceprincipal
}

azuread.user {
  id string
  displayName string
  givenName string
  surname string
  userPrincipalName string
  accountEnabled bool
  mailNickname string
  mail string
  objectType string
  userType string
  properties dict
}

azuread.group {
  id string
  displayName string
  securityEnabled bool
  mailEnabled bool
  mailNickname string
  mail string
  objectType string
  properties dict
  members() []azuread.user
}

azuread.domain {
  name string
  isVerified bool
  isDefault bool
  authenticationType string
  properties dict
}

azuread.application {
  id string
}

azuread.serviceprincipal {
  id string
}

azurerm {
  resources() []azurerm.resource
}

azurerm.resource {
  id string
  name string
  kind string
  location string
  tags map[string]string
  type string

  managedBy string
  sku dict
  plan dict
  identity dict

  provisioningState string
  createdTime time
  changedTime time
}

azurerm.compute {
  vms() []azurerm.compute.vm
  disks() []azurerm.compute.disk
}

azurerm.compute.vm {
  id string
  name string
  location string
  tags map[string]string
  type string
  properties dict
  extensions() []dict
  osDisk() azurerm.compute.disk
  dataDisks() []azurerm.compute.disk
}

azurerm.compute.disk {
  id string
  name string
  location string
  tags map[string]string
  type string
  managedBy string
  managedByExtended []string
  zones []string
  sku dict
  properties dict
}

azurerm.network {
  interfaces() []azurerm.network.interface
  securityGroups() []azurerm.network.securitygroup
  watchers() []azurerm.network.watcher
}

azurerm.network.interface {
  id string
  name string
  location string
  tags map[string]string
  type string
  etag string
  properties dict
  vm() azurerm.compute.vm
}

azurerm.network.securitygroup {
  id string
  name string
  location string
  tags map[string]string
  type string
  etag string
  properties dict
  interfaces []azure.network.interface
	securityRules []azurerm.network.securityrule
  defaultSecurityRules []azurerm.network.securityrule
}

azurerm.network.securityrule {
  id string
  name string
  etag string
  properties dict
  destinationPortRange []dict
}

azurerm.network.watcher {
  id string
  name string
  location string
  tags map[string]string
  type string
  etag string
  properties dict
}

azurerm.storage {
  accounts() []azurerm.storage.account
}

azurerm.storage.account {
  id string
  name string
  location string
  tags map[string]string
  type string
  properties dict
  identity dict
  sku dict
  kind string
  containers() []azurerm.storage.container
}

azurerm.storage.container {
  id string
  name string
  type string
  etag string
  properties dict
}

azurerm.web {
  apps() []azurerm.web.appsite
  availableRuntimes() []dict
}

azurerm.web.appsite {
  id string
  name string
  kind string
  location string
  type string
  tags map[string]string
  properties dict
  identity dict

  configuration() azurerm.web.appsiteconfig
  authenticationSettings() azurerm.web.appsiteauthsettings
  metadata() dict
  applicationSettings() dict
  connectionSettings() dict
  stack() dict
}

azurerm.web.appsiteauthsettings {
  id string
  name string
  kind string
  type string
  properties dict
}

azurerm.web.appsiteconfig {
  id string
  name string
  kind string
  type string
  properties dict
}

azurerm.sql {
  servers() []azurerm.sql.server
}

azurerm.sql.server {
  id string
  name string
  location string
  tags map[string]string
  type string
  properties dict
  databases() []azurerm.sql.database
  firewallRules() []azurerm.sql.firewallrule
  azureAdAdministrators() []azurerm.sql.server.administrator
  connectionPolicy() dict
  auditingPolicy() dict
  securityAlertPolicy() dict
  encryptionProtector() dict
}

azurerm.sql.server.administrator {
  id string
  name string
  type string
  administratorType string
  login string
  sid string
  tenantId string
}

azurerm.sql.database {
  id string
  name string
  type string
  collation string
  creationDate time
  containmentState int
  currentServiceObjectiveId string
  databaseId string
  earliestRestoreDate time
  createMode string
  sourceDatabaseId string
  sourceDatabaseDeletionDate time
  restorePointInTime time
  recoveryServicesRecoveryPointResourceId string
  edition string
  maxSizeBytes string
  requestedServiceObjectiveId string
  requestedServiceObjectiveName string
  serviceLevelObjective string
  status string
  elasticPoolName string
  defaultSecondaryLocation string
  serviceTierAdvisors dict
  recommendedIndex dict
  failoverGroupId string
  readScale string
  sampleName string
  zoneRedundant bool

  transparentDataEncryption() dict
  advisor() []dict
  threadDetectionPolicy() dict
  connectionPolicy() dict
  auditingPolicy() dict
  usage() []azurerm.sql.databaseusage
}

azurerm.sql.databaseusage {
  id string
  name string
  resourceName string
  displayName string
  currentValue float
  limit float
  unit string
  nextResetTime time
}

azurerm.postgresql {
   servers() []azurerm.postgresql.server
}

azurerm.postgresql.server {
  id string
  name string
  location string
  tags map[string]string
  type string
  properties dict
  configuration() []azurerm.sql.configuration
  databases() []azurerm.postgresql.database
  firewallRules() []azurerm.sql.firewallrule
}

azurerm.postgresql.database {
  id string
  name string
  type string
  charset string
  collation string
}

azurerm.mysql {
  servers() []azurerm.mysql.server
}

azurerm.mysql.server {
  id string
  name string
  location string
  tags map[string]string
  type string
  properties dict
  configuration() []azurerm.sql.configuration
  databases() []azurerm.mysql.database
  firewallRules() []azurerm.sql.firewallrule
}

azurerm.mysql.database {
  id string
  name string
  type string
  charset string
  collation string
}

azurerm.mariadb {
  servers() []azurerm.mariadb.server
}

azurerm.mariadb.server {
  id string
  name string
  location string
  tags map[string]string
  type string
  properties dict
  configuration() []azurerm.sql.configuration
  databases() []azurerm.mariadb.database
  firewallRules() []azurerm.sql.firewallrule
}

azurerm.mariadb.database {
  id string
  name string
  type string
  charset string
  collation string
}

azurerm.sql.configuration {
  id string
  name string
  type string
  value string
  description string
  defaultValue string
  dataType string
  allowedValues string
  source string
}

azurerm.sql.firewallrule {
  id string
  name string
  type string
  startIpAddress string
  endIpAddress string
}

azurerm.keyvault {
  vaults() []azurerm.keyvault.vault
}

azurerm.keyvault.vault {
  id string
  vaultName string
  type string
  location string
  tags map[string]string

  vaultUri() string
  properties() dict

  keys() []azurerm.keyvault.key
  certificates() []azurerm.keyvault.certificate
  secrets() []azurerm.keyvault.secret
  diagnosticSettings() []azurerm.monitor.diagnosticsetting
}

azurerm.keyvault.key {
  kid string
  tags map[string]string
  managed bool

  enabled bool
  notBefore time
  expires time
  created time
  updated time
  recoveryLevel string

  keyName() string
  version() string
  versions() []azurerm.keyvault.key
}

azurerm.keyvault.certificate {
  id string
  tags map[string]string
  x5t string

  enabled bool
  notBefore time
  expires time
  created time
  updated time
  recoveryLevel string

  certName() string
  version() string
  versions() []azurerm.keyvault.certificate
}

azurerm.keyvault.secret {
  id string
  tags map[string]string
  contentType string
  managed bool

  enabled bool
  notBefore time
  expires time
  created time
  updated time

  secretName() string
  version() string
  versions() []azurerm.keyvault.secret
}

azurerm.monitor {
  logProfiles() []azurerm.monitor.logprofile
}

azurerm.monitor.logprofile {
  id string
  name string
  location string
  type string
  tags map[string]string
  properties dict
  storageAccount azurerm.storage.account
}

azurerm.monitor.diagnosticsetting {
  id string
  name string
  type string
  properties dict
  storageAccount azurerm.storage.account
}

msgraph.beta.security {
  secureScores() []msgraph.beta.security.securityscore
  latestSecureScores() msgraph.beta.security.securityscore
}

msgraph.beta.security.securityscore {
  id string
  activeUserCount int
  averageComparativeScores []dict
  azureTenantId string
  controlScores []dict
  createdDateTime time
  currentScore float
  enabledServices []string
  licensedUserCount int
  maxScore float
  vendorInformation dict
}
