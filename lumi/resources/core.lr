mondoo {
  version() string
  build() string
  resources() []string
}

platform {
  name string
  title string
  family []string
  release string
  arch string
  kind string
  execenv string
}

command {
  init(command string)
  command string
  stdout() string
  stderr() string
  exitcode() int
}

pam.conf {
  init(path string)
  files() []file
  content(files) string
  services(files) map[string][]string
}

powershell {
  init(script string)
  script string
  stdout() string
  stderr() string
  exitcode() int
}

file {
  init(path string)
  path string
  basename(path) string
  dirname(path) string
  content(path, exists) string
  exists() bool
  permissions() file.permissions
  size() int
  user() user
  group() group
}

file.permissions {
  mode int
  user_readable bool
  user_writeable bool
  user_executable bool
  group_readable bool
  group_writeable bool
  group_executable bool
  other_readable bool
  other_writeable bool
  other_executable bool
  suid bool
  sgid bool
  sticky bool
}

files.find {
  []file
  from string
  xdev() bool
  type() string
  regex() string
  permissions() int
  name() string
}

parse.ini {
  init(path string, delimiter string)
  delimiter() string
  file() file
  content(file) string
  sections(content, delimiter) map[string]map[string]string
  params(sections) map[string]string
}

sshd.config {
  init(path string)
  file() file
  content(file) string
  params(content) map[string]string
  ciphers(params) []string
  macs(params) []string
  kexs(params) []string
}

package {
  init(name string)

  name string
  version string
  arch string
  epoch string

  format string
  status() string
  description string

  available string
  installed bool
  outdated() bool
}

packages {
  []package
}

kernel {
  parameters() map[string]string
  modules() []kernel.module
}

kernel.module {
  init(name string)

  name string
  size string
  loaded bool
}

ntp.conf {
  init(path string)
  file() file
  content(file) string
  settings(content) []string
  servers(settings) []string
  restrict(settings) []string
  fudge(settings) []string
}

rsyslog.conf {
  init(path string)
  files() []file
  content(files) string
  settings(content) []string
}

osupdate {
  name string
  category string
  severity string
  restart bool
  format string
}

os {
  env() map[string]string
  path() []string
  uptime() string
  updates() []osupdate
  rebootpending() bool
  hostname() string
  machineid() string
}

process {
  init(pid int)
  pid int
  state() string
  executable() string
  command() string
  flags() map[string]string
}

processes {
  []process
}

user {
  init(id string)
  id string
  uid int
  gid int
  sid string
  name string
  home string
  shell string
  enabled bool
  authorizedkeys() authorizedkeys
  sshkeys() []privatekey
}

users {
  []user
}

service {
  init(name string)
  name string
  description() string
  installed() bool
  running() bool
  enabled() bool
  type() string
}

services {
  []service
}

group {
  init(id string)
  id string
  gid int
  sid string
  name string
  members() []user
}

groups {
  []group
}

docker {
  images() []docker.image
  container() []docker.container
}

docker.image {
  id string
  size int
  virtualsize int
  tags []string
  labels map[string]string
}

docker.container {
  id string
  command string
  image string
  imageid string
  names []string
  state string
  status string
  labels map[string]string
}

auditpol {
  []auditpol.entry
}

auditpol.entry {
  machinename      string
	policytarget     string
	subcategory      string
	subcategoryguid  string
	inclusionsetting string
	exclusionsetting string
}

secpol {
  systemaccess() map[string]string
  eventaudit() map[string]string
  registryvalues() map[string]string
  privilegerights() map[string][]string
}

logindefs {
  init(path string)
  file() file
  content(file) string
  params(content) map[string]string
}

mount {
  []mount.point
}

mount.point {
  device string
  path string
  fstype string
  options map[string]string
}

shadow {
  []shadow.entry
}

shadow.entry {
  user string
  password string
  lastchanges string
  mindays string
  maxdays string
  warndays string
  inactivedays string
  expirydates string
  reserved string
}

registrykey {
  init(path string)
  path string
  exists() bool
  properties() map[string]string
  children() []string
}

registrykey.property {
  init(path string, name string)
  path string
  name string
  value() string
  exists() bool
}

yaml.path {
  filepath string
  jsonpath string
  result() string
}

authorizedkeys {
  []authorizedkeys.entry(file, content)
  init(path string)
  path string
  file() file
  content(file) string
}

authorizedkeys.entry {
  line int
  type string
  key string
  label() string
  options() []string
  file file
}

os.rootcertificates {
  []certificate(content)
  files() []file
  content(files) []string
}

parse.certificates {
  []certificate(content, path)
  init(path string)
  path string
  file() file
  content(file) string
}

pkix.name {
  id string
  dn string
  serialnumber string
  commonname string
  country []string
  organization []string
  organizationalunit []string
	locality []string
  province []string
	streetaddress []string
  postalcode []string
	names      map[string]string
	extranames map[string]string
}

pkix.extension {
  identifier string
  critical bool
  value string
}

certificate {
  pem string
  hashs() map[string]string
  serial() string
  subjectkeyid() string
  authoritykeyid() string
  subject() pkix.name
  issuer() pkix.name
  version() int
  notbefore() int
  notafter() int
  signature() string
  signingalgorithm() string
  isca() bool
  keyusage() []string
  extendedkeyusage() []string
  extensions() []pkix.extension
  policyidentifier() []string
  crldistributionpoints() []string
  ocspserver() []string
  issuingcertificateurl() []string
}

privatekey {
  pem string
  path() string
  encrypted() bool
}

vsphere {
  licenses() []vsphere.license
  datacenters() []vsphere.datacenter
}

esxi {
  host() vsphere.host
  vm() vsphere.vm
}

vsphere.datacenter {
  moid string
  name string
  inventorypath string
  hosts() []vsphere.host
  vms() []vsphere.vm
}

vsphere.license {
  name string
  total int
  used int
}

vsphere.host {
  moid string
  name string
  inventorypath string
  properties map[string]string
  standardvswitch() []vsphere.vswitch
  adapters() []vsphere.vmnic
  vmknics() []vsphere.vmknic
  packages() []esxi.vib
  acceptancelevel() string
  kernelmodules() []esxi.kernelmodule
  advancedsettings() map[string]string
  services() []esxi.service
  timezone() esxi.timezone
  ntp() esxi.ntpconfig
  snmp() map[string]string
}

vsphere.vm {
  moid string
  name string
  inventorypath string
  properties map[string]string
  advancedsettings() map[string]string
}

vsphere.vswitch {
  name string
  properties map[string]string
}

vsphere.vmnic {
  name string
  properties map[string]string
}

vsphere.vmknic {
  name string
  properties map[string]string
}

esxi.vib {
  id string
	name string
	acceptancelevel string
	creationdate string
	installdate string
	status string
	vendor string
	version string
}

esxi.kernelmodule {
	name string
	modulefile string
	version string
	loaded bool
  enabled bool
  signedstatus string
	signaturedigest string
	signaturefingerprint string
  vibacceptancelevel string
}

esxi.service {
  key string
  label string
  required bool
  uninstallable bool
  running bool
  ruleset []string
  policy string
}

esxi.timezone {
  key string
  name string
  description string
  offset int
}

esxi.ntpconfig {
  id string
  server []string
  config []string
}

aristaeos {
  runningconfig() string
  systemconfig() map[string]string
  ipinterfaces() []aristaeos.ipinterface
}

aristaeos.ipinterface {
  name string
  address string
  mtu string
}

aws.iam {
  users() []aws.iam.user
  roles() []aws.iam.role
  groups() []aws.iam.group
  policies() []aws.iam.policy
  credentialreport() []aws.iam.usercredentialreportentry
  accountpasswordpolicy() map[string]string
  accountsummary() map[string]int
  virtualmfadevices() []aws.iam.virtualmfadevice
}

aws.iam.usercredentialreportentry {
  init(properties map[string]string)
  properties map[string]string
}

aws.iam.user {
  arn string
  id string
  name string
  createdate int
  passwordlastused int
  tags map[string]string
  policies() []string
  attachedpolicies() []aws.iam.policy
}

aws.iam.policy {
  arn string
  id() string
  name() string
  description() string
  isattachable() bool
  attachmentcount() int
  createdate() int
  updatedate() int
  scope() string
  versions() []aws.iam.policyversion

  attachedusers() []aws.iam.user
  attachedroles() []aws.iam.role
  attachedgroups() []aws.iam.group
}

aws.iam.policyversion {
  arn string
  versionid string
  isdefaultversion bool
  document() string
  createdate int
}

aws.iam.role {
  arn string
  id string
  name string
  description string
  tags map[string]string
  createdate int
}

aws.iam.group {
  arn string
  id string
  name string
  createdate int
}

aws.iam.virtualmfadevice {
  serialnumber string
  enabledate int
  user aws.iam.user
}

aws.cloudtrail {
  trails() []aws.cloudtrail.trail
}

aws.cloudtrail.trail {
  Arn string
  Name string
  IsMultiRegionTrail bool
  IsOrganizationTrail bool
  LogFileValidationEnabled bool
  IncludeGlobalServiceEvents bool
  S3BucketName string
  SnsTopicARN string
  status() aws.cloudtrail.trailstatus
}

aws.cloudtrail.trailstatus {
  Arn string
  IsLogging bool
  LatestCloudWatchLogsDeliveryError string
  LatestCloudWatchLogsDeliveryTime int
  LatestDeliveryError string
  LatestDeliveryTime int
  LatestDigestDeliveryError string
  LatestDigestDeliveryTime int
  LatestNotificationError string
  LatestNotificationTime int
  StartLoggingTime int
  StopLoggingTime int
}