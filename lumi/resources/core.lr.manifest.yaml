resources:
  arista.eos:
    fields:
      fqdn: {}
      hostname: {}
      interfaces: {}
      ipInterfaces: {}
      ntp: {}
      roles: {}
      snmp: {}
      systemConfig: {}
      users: {}
      version: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - arista-eos
    snippets:
    - query: arista.eos.version
      title: Arista EOS Version
    - query: arista.eos.version['version'] == /18\./
      title: Verify that Arista EOS Version is 18.x
    - query: arista.eos.interfaces { name mtu bandwidth status }
      title: Display EOS interfaces
    - query: arista.eos.interfaces.where ( status['linkStatus'] == "connected") {  name
        mtu bandwidth status}
      title: Display all connected EOS interfaces
    - query: arista.eos.hostname
      title: EOS Hostname
  arista.eos.interface:
    fields:
      bandwidth: {}
      burnedInAddress: {}
      description: {}
      forwardingModel: {}
      hardware: {}
      interfaceAddress: {}
      interfaceCounters: {}
      interfaceMembership: {}
      interfaceStatistics: {}
      interfaceStatus: {}
      l2Mtu: {}
      lastStatusChangeTimestamp: {}
      lineProtocolStatus: {}
      mtu: {}
      name: {}
      physicalAddress: {}
      status: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - arista-eos
  arista.eos.ipInterface:
    fields:
      address: {}
      mtu: {}
      name: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - arista-eos
  arista.eos.ntpSetting:
    fields:
      status: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - arista-eos
  arista.eos.role:
    fields:
      default: {}
      name: {}
      rules: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - arista-eos
  arista.eos.runningConfig:
    fields:
      content: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - arista-eos
  arista.eos.runningConfig.section:
    fields:
      content: {}
      name: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - arista-eos
  arista.eos.snmpSetting:
    fields:
      enabled: {}
      notifications: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - arista-eos
  arista.eos.spt.mstInterface:
    fields:
      boundaryType: {}
      cost: {}
      counters: {}
      detail: {}
      features: {}
      id: {}
      inconsistentFeatures: {}
      isEdgePort: {}
      linkType: {}
      mstInstanceId: {}
      name: {}
      portNumber: {}
      priority: {}
      role: {}
      state: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - arista-eos
    snippets:
    - query: |
        arista.eos.stp.mstInstances {
         protocol == "mstp"
        }
      title: Verify the Spanning-Tree Version
  arista.eos.stp:
    fields:
      mstInstances: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - arista-eos
  arista.eos.stp.mst:
    fields:
      bridge: {}
      instanceId: {}
      interfaces: {}
      name: {}
      protocol: {}
      regionalRootBridge: {}
      rootBridge: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - arista-eos
  arista.eos.user:
    fields:
      format: {}
      name: {}
      nopassword: {}
      privilege: {}
      role: {}
      secret: {}
      sshkey: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - arista-eos
  audit.advisory:
    fields:
      description: {}
      id: {}
      modified: {}
      mrn: {}
      published: {}
      title: {}
      worstScore: {}
    is_private: true
    min_mondoo_version: 5.15.0
  audit.cve:
    fields:
      id: {}
      modified: {}
      mrn: {}
      published: {}
      state: {}
      summary: {}
      unscored: {}
      worstScore: {}
    is_private: true
    min_mondoo_version: 5.15.0
  audit.cvss:
    fields:
      score: {}
      vector: {}
    is_private: true
    min_mondoo_version: 5.15.0
  audit.exploit:
    fields:
      id: {}
      modified: {}
      mrn: {}
      worstScore: {}
    is_private: true
    min_mondoo_version: 5.15.0
  auditpol:
    fields: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: auditpol.list { inclusionsetting exclusionsetting  subcategory }
      title: List all audit policies
    - query: |
        auditpol.where(subcategory == 'Sensitive Privilege Use').list {
          inclusionsetting == 'Success and Failure'
        }
      title: Check a specific auditpol configuration
  auditpol.entry:
    fields:
      exclusionsetting: {}
      inclusionsetting: {}
      machinename: {}
      policytarget: {}
      subcategory: {}
      subcategoryguid: {}
    min_mondoo_version: 5.15.0
  authorizedkeys:
    fields:
      content: {}
      file: {}
      path: {}
    min_mondoo_version: 5.15.0
  authorizedkeys.entry:
    fields:
      file: {}
      key: {}
      label: {}
      line: {}
      options: {}
      type: {}
    min_mondoo_version: 5.15.0
  aws:
    docs:
      desc: |
        The `aws` can be used to assess the configuration of AWS accounts. It provides the `aws.regions` field for returning a list of enabled AWS regions in the account, and the `aws.vpcs` field which provides a list of VPCs configured within the account.
    fields:
      regions: {}
      vpcs: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
    refs:
    - title: 'AWS Documentation: Managing AWS Regions'
      url: https://docs.aws.amazon.com/general/latest/gr/rande-manage.html
    - title: 'AWS Documentation: Security in Amazon Virtual Private Cloud'
      url: https://docs.aws.amazon.com/vpc/latest/userguide/security.html
    snippets:
    - query: aws.regions
      title: List all enabled regions within the AWS account
    - query: aws.vpcs
      title: List of `aws.vpc` resources for all VPCs across all enabled regions
    - query: "aws.vpcs {\n  arn \n  id \n  state \n  isDefault \n  region \n  flowLogs\n
        \ routeTables\n}\n"
      title: List of `aws.vpc` resources for all VPCs across all enabled regions and
        the values for specified fields
    - query: |
        aws.vpcs.all( flowLogs.any(status == "ACTIVE") )
      title: Ensure VPC flow logging is enabled in all VPCs
  aws.accessAnalyzer:
    docs:
      desc: |
        The `aws.accessAnalyzer` resource returns a list of `aws.accessAnalyzer.analyzer` resources representing all of the AWS IAM Access Analyzers configured across the AWS account.
    fields:
      analyzers: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
    refs:
    - title: Using AWS IAM Access Analyzer
      url: https://docs.aws.amazon.com/IAM/latest/UserGuide/what-is-access-analyzer.html
    snippets:
    - query: aws.accessAnalyzer.analyzers
      title: Return a list of `aws.accessAnalyzer.analyzer` resources representing
        all of the AWS IAM Access Analyzers configured across the AWS account
    - query: "aws.accessAnalyzer.analyzers { \n  arn \n  name \n  status \n  type
        \n}\n"
      title: Return a list of `aws.accessAnalyzer.analyzer` resources and the value
        for specified fields
    - query: |
        aws.accessAnalyzer.analyzers.all(
          status == "ACTIVE"
        )
      title: Ensure that IAM Access analyzer is enabled for all regions
  aws.accessanalyzer.analyzer:
    fields:
      arn: {}
      name: {}
      status: {}
      tags:
        min_mondoo_version: 5.16.0
      type: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.account:
    docs:
      desc: |
        The `aws.account` resource provides configuration for AWS accounts including the account number, and configured aliases.
    fields:
      aliases: {}
      id: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
    snippets:
    - query: "aws.account { \n  id \n  aliases \n}\n"
      title: Return the account id (number) and any configured account aliases
  aws.acm:
    docs:
      desc: The `aws.acm` resource can be used to assess the configuration of the
        AWS Certificates Manager service within the account. This resource returns
        a list of `aws.acm.certificate` resources for all ACM certificates found within
        the account.
    fields:
      certificates: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
    refs:
    - title: What Is AWS Certificate Manager?
      url: https://docs.aws.amazon.com/acm/latest/userguide/acm-overview.html
    - title: Security in AWS Certificate Manager
      url: https://docs.aws.amazon.com/acm/latest/userguide/security.html
    snippets:
    - query: aws.acm.certificates
      title: Return a list of `aws.acm.certificate` resources within the AWS account
    - query: "aws.acm.certificates {\n  arn\n  notBefore\n  notAfter \n  createdAt\n
        \ domainName\n  status\n  subject\n  certificate() \n}\n"
      title: Return a list of `aws.acm.certificate` resources within the AWS account
        along with values for specified fields
    - query: |
        aws.acm.certificates.
          where( status != /PENDING_VALIDATION/ ).
          all (notAfter - notBefore <= 90 * time.day)
      title: Checks whether ACM Certificates in your account are marked for expiration
        within 90 days
  aws.acm.certificate:
    docs:
      desc: |
        The `aws.acm.certificate` resource provides fields for assessing the configuration of AWS ACM certificates. For usage see the `aws.acm` resource documentation.
    fields:
      arn: {}
      certificate: {}
      createdAt: {}
      domainName: {}
      notAfter: {}
      notBefore: {}
      status: {}
      subject: {}
      tags:
        min_mondoo_version: 5.16.0
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.apigateway:
    docs:
      desc: The `aws.apigateway` resource can be used to assess the configuration
        of the AWS API Gateway service.
    fields:
      restApis: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
    refs:
    - title: What is Amazon API Gateway?
      url: https://docs.aws.amazon.com/apigateway/latest/developerguide/welcome.html
    - title: Security in Amazon API Gateway
      url: https://docs.aws.amazon.com/apigateway/latest/developerguide/security.html
    snippets:
    - query: aws.apigateway.restApis
      title: Return a list of `aws.apigateway.restapi` resources for all REST APIs
        configured with the account across all enabled regions
    - query: |
        aws.apigateway.restApis {
          createdDate
          description
          stages
          region
          arn
          id
          name
        }
      title: Return a list of `aws.apigateway.restapi` resources for all REST APIs
        configured with the account across all enabled regions and the value for specified
        fields
    - query: "aws.apigateway.restApis.all(stages.all(\n  methodSettings['CachingEnabled']
        == true && \n    methodSettings['CacheDataEncrypted'] == true\n))\n"
      title: Checks that all methods in Amazon API Gateway have caching enabled and
        encrypted
    - query: |
        aws.apigateway.restApis.all(stages.all(
        methodSettings['LoggingLevel'] == "ERROR" || methodSettings['LoggingLevel'] == "INFO"
        ))
      title: Checks that all methods in Amazon API Gateway have logging enabled
  aws.apigateway.restapi:
    docs:
      desc: |
        The `aws.apigateway.restapi` resource provides fields representing an individual REST API configured within the AWS account. For usage see the `aws.apigateway` resource documentation.
    fields:
      arn: {}
      createdDate: {}
      description: {}
      id: {}
      name: {}
      region: {}
      stages: {}
      tags:
        min_mondoo_version: 5.16.0
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.apigateway.stage:
    docs:
      desc: |
        The `aws.apigateway.stage` resource provides fields representing an individual stage configured on a REST API. For usage see the `aws.apigateway` resource documentation.
    fields:
      arn: {}
      deploymentId: {}
      description: {}
      methodSettings: {}
      name: {}
      tracingEnabled: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
    snippets:
    - query: "aws.apigateway.restApis { \n  arn \n  stages \n}\n"
      title: Return a list of AWS API Gateway REST APIs configured across all enabled
        regions in the AWS account and the values for the arn and stages
  aws.autoscaling:
    docs:
      desc: "The `aws.autoscaling` resource can be used to assess the configuration
        of AWS auto scaling groups within an AWS account. This resource provides the
        the `.groups` field which returns a list of `aws.autoscaling.group` resources
        representing all auto scaling groups configured across all enabled regions
        across the account.      \n"
    fields:
      groups: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
    refs:
    - title: Security in Amazon EC2 Auto Scaling
      url: https://docs.aws.amazon.com/autoscaling/ec2/userguide/security.html
    - title: Compliance validation for Amazon EC2 Auto Scaling
      url: https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-compliance.html
    snippets:
    - query: "aws.autoscaling.groups { \n  arn \n  healthCheckType \n  loadBalancerNames
        \n  name \n}\n"
      title: Return a list of `aws.autoscaling.group` resources representing all auto
        scaling groups configured across all enabled regions across the account and
        the value for specified fields
    - query: "aws.autoscaling.groups.where(loadBalancerNames.length > 0) { \n  healthCheckType
        == \"ELB\" \n}\n"
      title: Checks that all autoscaling groups assoc with a load balancer use health
        checks
  aws.autoscaling.group:
    docs:
      desc: |
        The `aws.autoscaling.group` resource provides fields representing an individual AWS auto scaling group within the account. For usage see the `aws.autoscaling` resource documentation.
    fields:
      arn: {}
      healthCheckType: {}
      loadBalancerNames: {}
      name: {}
      tags:
        min_mondoo_version: 5.16.0
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.cloudtrail:
    docs:
      desc: |
        The `aws.cloudtrail` resource can be used to assess the configuration of AWS CloudTrails deployed within an AWS account. The resource provides the `.trails` field which creates a list of `aws.cloudtrail.trail` resources representing all CloudTrails configured across every enabled region.
    fields:
      trails: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
    refs:
    - title: Security best practices in AWS CloudTrail
      url: https://docs.aws.amazon.com/awscloudtrail/latest/userguide/best-practices-security.html
    snippets:
    - query: |
        aws.cloudtrail.trails {
          arn
          name
          kmsKey
          isMultiRegionTrail
          isOrganizationTrail
          logFileValidationEnabled
          includeGlobalServiceEvents
          s3bucket
          snsTopicARN
          status
          logGroup
          cloudWatchLogsRoleArn
          eventSelectors
          region
        }
      title: Return a list of `aws.cloudtrail.trail` resources representing all AWS
        Cloud Trails configured across all enabled regions and the values for specified
        fields
    - query: "aws.cloudtrail.trails.any( \n  isMultiRegionTrail && status['IsLogging']
        \n)\n"
  aws.cloudtrail.trail:
    docs:
      desc: |
        The `aws.cloudtrail.trail` object represents an individual AWS CloudTrail configured within an account. For usage see the `aws.cloudtrail` resource.
    fields:
      arn: {}
      cloudWatchLogsRoleArn: {}
      eventSelectors: {}
      includeGlobalServiceEvents: {}
      isMultiRegionTrail: {}
      isOrganizationTrail: {}
      kmsKey: {}
      logFileValidationEnabled: {}
      logGroup: {}
      name: {}
      region: {}
      s3bucket: {}
      snsTopicARN: {}
      status: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.cloudwatch:
    docs:
      desc: |
        The `aws.cloudwatch` resource is used to assess the configuration of the AWS CloudWatch service.
    fields:
      alarms: {}
      logGroups: {}
      metrics: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
    snippets:
    - query: aws.cloudwatch.logGroups
      title: Return a list of `aws.cloudwatch.loggroup` resources representing individual
        CloudWatch log groups configured across all enabled regions
    - query: aws.cloudwatch.metrics
      title: Return a list of `aws.cloudwatch.metric` resources representing individual
        CloudWatch metrics configured across all enabled regions
    - query: |
        aws.cloudwatch.alarms.all(
          actions.length > 0 == true &&
          insufficientDataActions.length > 0 == props.cloudwatchAlarmInsufficientDataActionRequired &&
          okActions.length > 0 == props.cloudwatchAlarmOkActionRequired
        )
      title: Checks that all cloudwatch alarms have at least one action enabled
  aws.cloudwatch.loggroup:
    docs:
      desc: |
        The `aws.cloudwatch.loggroup` object represents an individual AWS CloudWatch log group configured within an account. For usage see the `aws.cloudwatch` resource.
    fields:
      arn: {}
      kmsKey: {}
      metricsFilters: {}
      name: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.cloudwatch.loggroup.metricsfilter:
    docs:
      desc: |
        The `aws.cloudwatch.metricsfilter` object represents an individual AWS CloudWatch metrics filter configured within an account. For usage see the `aws.cloudwatch` resource.
    fields:
      filterName: {}
      filterPattern: {}
      id: {}
      metrics: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.cloudwatch.metric:
    docs:
      desc: |
        The `aws.cloudwatch.metric` object represents an individual AWS CloudWatch metric configured within an account. For usage see the `aws.cloudwatch` resource.
    fields:
      alarms: {}
      dimensions:
        min_mondoo_version: 5.17.1
      name: {}
      namespace: {}
      region: {}
      statistics:
        min_mondoo_version: 5.17.1
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.cloudwatch.metric.datapoint:
    fields:
      average: {}
      id: {}
      maximum: {}
      minimum: {}
      sum: {}
      timestamp: {}
      unit: {}
    is_private: true
    min_mondoo_version: 5.17.1
    platform:
      name:
      - aws
  aws.cloudwatch.metricdimension:
    fields:
      name: {}
      value: {}
    min_mondoo_version: 5.17.1
    platform:
      name:
      - aws
  aws.cloudwatch.metricsalarm:
    docs:
      desc: |
        The `aws.cloudwatch.metricsalarm` object represents an individual AWS CloudWatch metric alarm configured within an account. For usage see the `aws.cloudwatch` resource.
    fields:
      actions: {}
      arn: {}
      insufficientDataActions: {}
      metricName: {}
      metricNamespace: {}
      name: {}
      okActions: {}
      region: {}
      state: {}
      stateReason: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.cloudwatch.metricstatistics:
    fields:
      datapoints: {}
      label: {}
      name: {}
      namespace: {}
      region: {}
    min_mondoo_version: 5.17.1
    platform:
      name:
      - aws
  aws.codebuild:
    docs:
      desc: "The `aws.codebuild` resource is used to assess the configuration of the
        AWS CodeBuild service and the projects within. \n"
    fields:
      projects: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
    refs:
    - title: Security in AWS CodeBuild
      url: https://docs.aws.amazon.com/codebuild/latest/userguide/security.html
    snippets:
    - query: |
        aws.codebuild.projects {
          arn
          description
          name
          environment
          region
          source
        }
      title: Return a list of `aws.codebuild.project` resources representing all AWS
        CodeBuild projects configured across all enabled regions within the account
        and the values for specified fields
    - query: "aws.codebuild.projects { \n  environment ['EnvironmentVariables'].where(_['Name']
        == \"AWS_ACCESS_KEY_ID\") { _['Type'] != \"PLAINTEXT\"}\n  environment ['EnvironmentVariables'].where(_['Name']
        == \"AWS_SECRET_ACCESS_KEY\") { _['Type'] != \"PLAINTEXT\"} \n}\n"
      title: Checks that all projects containing env variables AWS_ACCESS_KEY_ID and
        AWS_SECRET_ACCESS_KEY are not in plaintext
    - query: "aws.codebuild.projects.where( source['Type'] == \"BITBUCKET\" || source['Type']
        == \"GITHUB\" ) { \n  source['Auth']['Type'] == \"OAUTH\"\n}\n"
      title: Checks that all projects using github or bitbucket as the source use
        oauth
  aws.codebuild.project:
    docs:
      desc: |
        The `aws.codebuild.project` resource provides fields representing an individual AWS CodeBuild project configured within the account. For usage see the `aws.codebuild` documentation.
    fields:
      arn: {}
      description: {}
      environment: {}
      name: {}
      region: {}
      source: {}
      tags:
        min_mondoo_version: 5.16.0
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.config:
    docs:
      desc: |
        The `aws.config` resource is used to assess the configuration of the AWS Config service. The resource provides the `.recorders` field which returns a list of `aws.config.recorder` resources representing all AWS Config recorders configured across all enabled regions, as well as the `.rules` field which returns a list of `aws.config.rule` resources representing all AWS Config rules configured across all enabled regions in the account.
    fields:
      recorders: {}
      rules: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
    refs:
    - title: Security in AWS Config
      url: https://docs.aws.amazon.com/config/latest/developerguide/security.html
    - title: AWS Config best practices
      url: https://aws.amazon.com/blogs/mt/aws-config-best-practices/
    snippets:
    - query: "aws.config.rules {\n  arn \n  state \n  source\n}\n"
      title: Return a list of `aws.config.rule` resources representing AWS Config
        rules configured across all enabled regions and the value for specified fields
    - query: "aws.config.recorders {\n  name \n  roleArn \n  allSupported \n  includeGlobalResourceTypes
        \n  recording \n  lastStatus \n  region \n}\n"
      title: Return a list of AWS Config recorders configured across all enabled regions
        and the value for specified fields
    - query: |
        aws.config.recorders.any(allSupported == true && includeGlobalResourceTypes == true)
        aws.config.recorders.where(allSupported == true && includeGlobalResourceTypes == true).all(
          recording == true && lastStatus == "SUCCESS"
        )
      title: Ensure AWS Config is enabled in all regions
  aws.config.recorder:
    docs:
      desc: "The `aws.config.recorder` resource provides fields representing an individual
        AWS Config recorder configured within an account. For usage see the `aws.config`
        resource documentation. \n"
    fields:
      allSupported: {}
      includeGlobalResourceTypes: {}
      lastStatus: {}
      name: {}
      recording: {}
      region: {}
      roleArn: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.config.rule:
    docs:
      desc: "The `aws.config.rule` resource provides fields representing an individual
        AWS Config rule configured within an account. For usage see the `aws.config`
        resource documentation. \n"
    fields:
      arn: {}
      source: {}
      state: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.dms:
    docs:
      desc: |
        The `aws.dms` resource is used to assess the configuration of the AWS Database Migration service.
    fields:
      replicationInstances: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
    refs:
    - title: Security in AWS Database Migration Service
      url: https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html
    snippets:
    - query: aws.dms.replicationInstances
      title: Return a list of AWS Database Migration service replication instances
    - query: |
        aws.dms.replicationInstances.none(
          _['PubliclyAccessible'] == true
        )
      title: Checks whether AWS Database Migration Service replication instances are
        public
  aws.dynamodb:
    docs:
      desc: |
        The `aws.dynamodb` resource can be used to assess the configuration of the AWS DynamoDB.
    fields:
      backups: {}
      globalTables: {}
      limits: {}
      tables: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
    refs:
    - title: Security and Compliance in Amazon DynamoDB
      url: https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/security.html
    snippets:
    - query: "aws.dynamodb.tables {\n  arn \n  name \n  region \n  backups \n  sseDescription
        \n  provisionedThroughput \n  continuousBackups \n}\n"
      title: Return a list of `aws.dynamodb.table` resources and the values for specified
        fields
    - query: "aws.dynamodb.limits {\n  arn \n  region \n  accountMaxRead \n  accountMaxWrite
        \n  tableMaxRead\n  tableMaxWrite \n}\n"
      title: Return a list of `aws.dynamodb.limit` resources and the values for specified
        fields
    - query: "aws.dynamodb.globaltables {\n  arn \n  name \n  replicaSettings \n}\n"
      title: Return a list of `aws.dynamodb.globaltable` resources and the value for
        specified fields
    - query: "aws.dynamodb.tables.all( \n  sseDescription['SSEType'] == 'KMS' && sseDescription['Status']
        == 'ENABLED'\n)\n"
      title: Checks that all DynamoDB tables are encrypted with AWS Key Management
        Service (KMS)
  aws.dynamodb.globaltable:
    docs:
      desc: |
        The `aws.dynamodb.globaltable` resource provides fields representing a DynamoDB Global Table. For usage see `aws.dynamodb` resource documentation.
    fields:
      arn: {}
      name: {}
      replicaSettings: {}
      tags:
        min_mondoo_version: 5.16.0
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.dynamodb.limit:
    docs:
      desc: |
        The `aws.dynamodb.limit` resource provides fields representing a DynamoDB limit configuration. For usage see `aws.dynamodb` resource documentation.
    fields:
      accountMaxRead: {}
      accountMaxWrite: {}
      arn: {}
      region: {}
      tableMaxRead: {}
      tableMaxWrite: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.dynamodb.table:
    docs:
      desc: |
        The `aws.dynamodb.table` resource provides fields representing a DynamoDB Table. For usage see `aws.dynamodb` resource documentation.
    fields:
      arn: {}
      backups: {}
      continuousBackups: {}
      name: {}
      provisionedThroughput: {}
      region: {}
      sseDescription: {}
      tags:
        min_mondoo_version: 5.16.0
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.ec2:
    docs:
      desc: |
        The `aws.ec2` resource can be used to assess the configuration of AWS EC2 instances.
    fields:
      ebsEncryptionByDefault: {}
      instances: {}
      internetGateways: {}
      networkAcls: {}
      securityGroups: {}
      snapshots: {}
      volumes: {}
      vpnConnections: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
    refs:
    - title: Security in Amazon EC2
      url: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-security.html
    - title: Security in Amazon Virtual Private Cloud
      url: https://docs.aws.amazon.com/vpc/latest/userguide/security.html
    snippets:
    - query: "aws.ec2.instances {\n  arn\n  instanceId \n  detailedMonitoring \n  region
        \n  publicIp \n  ssm \n  vpc \n  httpTokens \n  patchState \n  state \n  deviceMappings
        \n  securityGroups\n  publicDnsName \n  instanceStatus\n  stateReason \n  stateTransitionReason
        \n  ebsOptimized \n  instanceType \n  tags \n  image\n  launchTime \n}\n"
      title: Return a list of all EC2 instances across all enabled regions in the
        account and the value for specified fields
    - query: |
        aws.ec2.securityGroups {
          arn
          region
          vpc
          id
        }
      title: Return a list of security groups across every enabled region and the
        value for specified fields
    - query: "aws.ec2.volumes {\n  arn\n  region \n}\n"
      title: Return a list of all EBS volumes along with the associated ARN and the
        region the volume exists in
    - query: |
        aws.ec2.securityGroups.where(name == "default") {
          ipPermissions.all(ipRanges.length == 0 && ipv6Ranges.length == 0 && fromPort == 0 && toPort == 0)
          ipPermissionsEgress.all(ipRanges.length == 0 && ipv6Ranges.length == 0 && fromPort == 0 && toPort == 0)
        }
      title: Ensure the default security group of every VPC restricts all traffic
  aws.ec2.image:
    docs:
      desc: |
        The `aws.ec2.image` resource provides fields for assessing AMIs within an account. For usage see `aws.ec2` resource.
    fields:
      architecture: {}
      arn: {}
      id: {}
      name: {}
      ownerAlias:
        min_mondoo_version: 5.22.0
      ownerId: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.ec2.instance:
    docs:
      desc: |
        The `aws.ec2.instance` resource provides fields for assessing the configuration of EC2 instances within an account. For usage see `aws.ec2` resource.
    fields:
      arn: {}
      detailedMonitoring: {}
      deviceMappings: {}
      ebsOptimized: {}
      httpTokens: {}
      image: {}
      instanceId: {}
      instanceStatus: {}
      instanceType: {}
      launchTime: {}
      patchState: {}
      publicDnsName: {}
      publicIp: {}
      region: {}
      securityGroups: {}
      ssm: {}
      state: {}
      stateReason: {}
      stateTransitionReason: {}
      tags: {}
      vpc: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.ec2.instance.device:
    docs:
      desc: |
        The `aws.ec2.instance.device` resource provides fields for assessing the configuration of devices attached to EC2 instances within an account. For usage see `aws.ec2` resource.
    fields:
      deleteOnTermination: {}
      deviceName: {}
      status: {}
      volumeId: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.ec2.internetgateway:
    docs:
      desc: |
        The `aws.ec2.internetgateway` resource provides fields for assessing the configuration of internet gateways within an AWS account. For usage see `aws.ec2` resource.
    fields:
      arn: {}
      attachments: {}
      id: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.ec2.networkacl:
    docs:
      desc: |
        The `aws.ec2.networkacl` resource provides fields for assessing the configuration of VPC network ACLs within an AWS account. For usage see `aws.ec2` resource.
    fields:
      arn: {}
      entries: {}
      id: {}
      region: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.ec2.networkacl.entry:
    docs:
      desc: |
        The `aws.ec2.networkacl.entry` resource provides fields for assessing the configuration of network ACL entries within an AWS account. For usage see `aws.ec2` resource.
    fields:
      egress: {}
      id: {}
      portRange: {}
      ruleAction: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.ec2.networkacl.entry.portrange:
    docs:
      desc: |
        The `aws.ec2.networkacl.portrange` resource provides fields for assessing the port range configuration of network ACL entries within an AWS account. For usage see `aws.ec2` resource.
    fields:
      from: {}
      id: {}
      to: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.ec2.securitygroup:
    docs:
      desc: |
        The `aws.ec2.securitygroup` resource provides fields for assessing the configuration of security groups within an AWS account. For usage see `aws.ec2` resource.
    fields:
      arn: {}
      description: {}
      id: {}
      ipPermissions: {}
      ipPermissionsEgress: {}
      isAttachedToNetworkInterface: {}
      name: {}
      region: {}
      tags: {}
      vpc: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.ec2.securitygroup.ippermission:
    docs:
      desc: |
        The `aws.ec2.securitygroup.ippermission` resource provides fields for assessing the configuration of ip permissions for security groups within an AWS account. For usage see `aws.ec2` resource.
    fields:
      fromPort: {}
      id: {}
      ipProtocol: {}
      ipRanges: {}
      ipv6Ranges: {}
      toPort: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.ec2.snapshot:
    docs:
      desc: |
        The `aws.ec2.snapshot` resource provides fields for assessing the configuration of EBS snapshots within an AWS account. For usage see `aws.ec2` resource.
    fields:
      arn: {}
      createVolumePermission: {}
      id: {}
      region: {}
      startTime: {}
      tags: {}
      volumeId: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.ec2.vgwtelemetry:
    docs:
      desc: |
        The `aws.ec2.vgwtelemetry` resource provides fields for assessing the configuration of telemetry for VPN tunnels within an AWS account. For usage see `aws.ec2` resource.
    fields:
      outsideIpAddress: {}
      status: {}
      statusMessage: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.ec2.volume:
    docs:
      desc: |
        The `aws.ec2.volume` resource provides fields for assessing the configuration of EBS volumes within an AWS account. For usage see `aws.ec2` resource.
    fields:
      arn: {}
      attachments: {}
      availabilityZone: {}
      createTime:
        min_mondoo_version: 5.25.0
      encrypted: {}
      id: {}
      state: {}
      tags: {}
      volumeType: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.ec2.vpnconnection:
    docs:
      desc: |
        The `aws.ec2.vpnconnection` resource provides fields for assessing the configuration of VPN connections within an AWS account. For usage see `aws.ec2` resource.
    fields:
      arn: {}
      vgwTelemetry: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.efs:
    docs:
      desc: |
        The `aws.efs` resource can be used to assess the configuration of Amazon Elastic File System deployments.
    fields:
      filesystems: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
    refs:
    - title: Security in Amazon EFS
      url: https://docs.aws.amazon.com/efs/latest/ug/security-considerations.html
    snippets:
    - query: |
        aws.efs.filesystems {
          name
          id
          arn
          encrypted
          kmsKey
          backupPolicy
          region
        }
      title: Return a list of `aws.efs.filesystem` resources representing any EFS
        deployments across all enabled regions in the account
    - query: "aws.efs.filesystems.all(\n  encrypted == true && kmsKey.arn == /^arn:aws:kms:.*/
        \n)\n"
      title: Checks whether all EFS systems are configured to encrypt file data using
        KMS
  aws.efs.filesystem:
    docs:
      desc: "The `aws.efs.filesystem` resource provides fields for assessing the configuration
        of individual EFS deployments. For usage see the `aws.efs` resource documentation.
        \n"
    fields:
      arn: {}
      backupPolicy: {}
      encrypted: {}
      id: {}
      kmsKey: {}
      name: {}
      region: {}
      tags: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.eks:
    fields:
      clusters: {}
    min_mondoo_version: 5.31.0
    platform:
      name:
      - aws
  aws.eks.cluster:
    fields:
      arn: {}
      createdAt: {}
      encryptionConfig: {}
      endpoint: {}
      logging: {}
      name: {}
      networkConfig: {}
      platformVersion: {}
      region: {}
      resourcesVpcConfig: {}
      status: {}
      tags: {}
      version: {}
    is_private: true
    min_mondoo_version: 5.31.0
    platform:
      name:
      - aws
  aws.elasticache:
    docs:
      desc: "The `aws.elasticache` resource can be used to assess the configuration
        of Amazon ElastiCache. \n"
    fields:
      clusters: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
    refs:
    - title: Security in Amazon ElastiCache
      url: https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/redis-security.html
    snippets:
    - query: |
        aws.elasticache.clusters.all(
          _['SnapshotRetentionLimit'] > _['SnapshotRetentionPeriod']
        )
      title: Checks if the ElastiCache Redis clusters have automatic backup turned
        on
  aws.elb:
    docs:
      desc: |
        The `aws.elb` resource can be used to assess the configuration of Amazon Elastic Load Balancers within an AWS account.
    fields:
      classicLoadBalancers: {}
      loadBalancers: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
    refs:
    - title: Security in Elastic Load Balancing
      url: https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/security.html
    snippets:
    - query: |
        aws.elb.loadbalancers {
          arn
          dnsName
          listenerDescriptions
          name
          scheme
          attributes
        }
      title: Return a list of all application, gateway, and network Elastic Load Balancers
        deployed across every enabled region and the values for specified fields
    - query: |
        aws.elb.classicLoadBalancers {
          arn
          dnsName
          listenerDescriptions
          name
          scheme
          attributes
        }
      title: Return a list of all classic Elastic Load Balancers deployed across every
        enabled region and the values for specified fields
    - query: "aws.elb.loadBalancers.all( listenerDescriptions.any ( \n  _['Protocol']
        == \"HTTPS\" || _['Protocol'] == \"SSL\" ) \n)\n"
      title: Checks whether HTTP to HTTPS redirection is configured on all application
        load balancer http listeners
    - query: "aws.elb.classicLoadBalancers.all( listenerDescriptions.any ( \n  _['Listener']['Protocol']
        == \"HTTPS\" || _['Listener']['Protocol'] == \"SSL\" ) \n)\n"
      title: Checks that all Classic Load Balancers use SSL certificates provided
        by AWS Cert Mgr
  aws.elb.loadbalancer:
    docs:
      desc: |
        The `aws.elb.loadbalancer` resource provides fields for assessing the configuration of individual classic, application, gateway, and network Amazon Elastic Load Balancers. For usage see the `aws.elb` documentation.
    fields:
      arn: {}
      attributes: {}
      dnsName: {}
      listenerDescriptions: {}
      name: {}
      scheme: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.emr:
    docs:
      desc: |
        The `aws.emr` resource can be used to assess the configuration of Amazon EMR clusters. This resource provides a list of `aws.emr.cluster` resources representing EMR clusters deployed across all enabled regions.
    fields:
      clusters: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
    refs:
    - title: Security in Amazon EMR
      url: https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-security.html
    snippets:
    - query: |
        aws.emr.clusters {
          arn
          name
          normalizedInstanceHours
          outpostArn
          status
          masterInstances
          id
        }
      title: Return a list of EMR clusters deployed across all enabled regions and
        the value for specified fields
    - query: |
        aws.emr.clusters.all(
          masterInstances { _['PublicIpAddress'] == null }
        )
      title: Checks whether EMR cluster master nodes have public ips
  aws.emr.cluster:
    docs:
      desc: |
        The `aws.emr.cluster` resource provides fields for assessing the configuration of individual Amazon EMR clusters. For usage see the `aws.emr` resource documentation.
    fields:
      arn: {}
      id: {}
      masterInstances: {}
      name: {}
      normalizedInstanceHours: {}
      outpostArn: {}
      status: {}
      tags: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.es:
    docs:
      desc: |
        The `aws.es` resource can be used to assess the configuration of Amazon ElasticSearch domains. This resource provides a list of `aws.es.domain` resources representing ElasticSearch domains deployed across all enabled regions.
    fields:
      domains: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
    refs:
    - title: Amazon Security Blog on ElasticSearch
      url: https://aws.amazon.com/blogs/security/tag/amazon-elasticsearch-service/
  aws.es.domain:
    docs:
      desc: |
        The `aws.es.domain` provides fields for assessing the configuration of individual Amazon ElasticSearch domains. For usage see the `aws.es` resource documentation
    fields:
      arn: {}
      encryptionAtRestEnabled: {}
      endpoint: {}
      name: {}
      nodeToNodeEncryptionEnabled: {}
      region: {}
      tags: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.guardduty:
    docs:
      desc: |
        The `aws.guardduty` resource can be used to assess the configuration of the AWS GuardDuty service. The resource provides a list of `aws.guardduty.detector` resources representing GuardDuty Detectors deployed across all enabled regions.
    fields:
      detectors: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
    refs:
    - title: Security in Amazon GuardDuty
      url: https://docs.aws.amazon.com/guardduty/latest/ug/security.html
    snippets:
    - query: |
        aws.guardduty.detectors {
          id
          region
          status
          findingPublishingFrequency
          unarchivedFindings
        }
      title: Return a list of Amazon GuardDuty Detectors along with the values for
        specified fields
    - query: |
        aws.guardduty.detectors.all( status == "ENABLED" )
      title: Checks that guardduty is enabled in all regions
  aws.guardduty.detector:
    docs:
      desc: |
        The `aws.guardduty.dectector` provides fields for assessing the configuration of individual Amazon GuardDuty Detectors. For usage see the `aws.guardduty` resource documentation
    fields:
      findingPublishingFrequency: {}
      id: {}
      region: {}
      status: {}
      unarchivedFindings: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.iam:
    docs:
      desc: |
        The `aws.iam` resource can be used to assess the configuration of the AWS IAM service. The resource provides a list of `aws.iam.user` resources representing GuardDuty Detectors deployed across all enabled regions.
    fields:
      accountPasswordPolicy: {}
      accountSummary: {}
      attachedPolicies: {}
      credentialReport: {}
      groups: {}
      policies: {}
      roles: {}
      serverCertificates: {}
      users: {}
      virtualMfaDevices: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
    refs:
    - title: Security in IAM and AWS STS
      url: https://docs.aws.amazon.com/IAM/latest/UserGuide/security.html
    snippets:
    - query: |
        aws.iam.users {
          users
          roles
          groups
          policies
          attachedPolicies
          accountSummary
          virtualMfaDevices
          serverCertificates
        }
      title: Return a list of `aws.iam.user` resources representing IAM users in the
        account and specified fields
    - query: "aws.iam.credentialReport.where(mfaActive == false) { \n  user { \n    arn
        \n    name \n    groups \n  }\n}\n"
      title: Return a list of users that do not have MFA configured along with the
        ARN, name, and associated IAM Groups
    - query: "aws.iam.credentialReport.\n  where(\n    passwordEnabled &&\n    accessKey1Active
        &&\n    userCreationTime < time.today\n  ).\n  all(\n    accessKey1LastUsedDate
        != null\n  ) \n"
      title: Do not setup access keys during initial user setup for all IAM users
        that have a console password
  aws.iam.group:
    docs:
      desc: |
        The `aws.iam.group` provides fields for assessing the configuration of IAM Groups. For usage see the `aws.iam` resource documentation.
    fields:
      arn: {}
      createDate: {}
      id: {}
      name: {}
      usernames: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.iam.policy:
    docs:
      desc: |
        The `aws.iam.policy` provides fields for assessing the configuration of individual IAM Policies. For usage see the `aws.iam` resource documentation.
    fields:
      arn: {}
      attachedGroups: {}
      attachedRoles: {}
      attachedUsers: {}
      attachmentCount: {}
      createDate: {}
      defaultVersion: {}
      description: {}
      id: {}
      isAttachable: {}
      name: {}
      scope: {}
      updateDate: {}
      versions: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.iam.policyversion:
    docs:
      desc: |
        The `aws.iam.policyversion` provides fields for assessing the metadata for IAM Policy versions. For usage see the `aws.iam` resource documentation.
    fields:
      arn: {}
      createDate: {}
      document: {}
      isDefaultVersion: {}
      versionId: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.iam.role:
    docs:
      desc: |
        The `aws.iam.role` provides fields for assessing the configuration of individual IAM Roles. For usage see the `aws.iam` resource documentation.
    fields:
      arn: {}
      createDate: {}
      description: {}
      id: {}
      name: {}
      tags: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.iam.user:
    docs:
      desc: |
        The `aws.iam.user` provides fields for assessing the configuration of individual IAM users. For usage see the `aws.iam` resource documentation.
    fields:
      accessKeys: {}
      arn: {}
      attachedPolicies: {}
      createDate: {}
      groups: {}
      id: {}
      name: {}
      passwordLastUsed: {}
      policies: {}
      tags: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.iam.usercredentialreportentry:
    docs:
      desc: |
        The `aws.iam.credentialreportentry` provides fields for assessing the metadata for individual IAM Credential Report entries. For usage see the `aws.iam` resource documentation.
    fields:
      accessKey1Active: {}
      accessKey1LastRotated: {}
      accessKey1LastUsedDate: {}
      accessKey1LastUsedRegion: {}
      accessKey1LastUsedService: {}
      accessKey2Active: {}
      accessKey2LastRotated: {}
      accessKey2LastUsedDate: {}
      accessKey2LastUsedRegion: {}
      accessKey2LastUsedService: {}
      arn: {}
      cert1Active: {}
      cert1LastRotated: {}
      cert2Active: {}
      cert2LastRotated: {}
      mfaActive: {}
      passwordEnabled: {}
      passwordLastChanged: {}
      passwordLastUsed: {}
      passwordNextRotation: {}
      properties: {}
      user: {}
      userCreationTime: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.iam.virtualmfadevice:
    docs:
      desc: |
        The `aws.iam.virtualmfadevice` provides fields for assessing the metadata for individual virtual MFA devices associated with IAM users. For usage see the `aws.iam` resource documentation.
    fields:
      enableDate: {}
      serialNumber: {}
      user: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.kms:
    docs:
      desc: "The `aws.kms` resource can be used to assess the configuration of AWS
        KMS keys. \n"
    fields:
      keys: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
    snippets:
    - query: |
        aws.kms.keys.where( metadata['KeyState'] == "Enabled" ).all( keyRotationEnabled == true )
      title: Ensure rotation for customer created CMKs is enabled
  aws.kms.key:
    docs:
      desc: |
        The `aws.kms.key` provides fields for assessing the configuration of individual KMS keys. For usage see the `aws.kms` resource documentation.
    fields:
      arn: {}
      id: {}
      keyRotationEnabled: {}
      metadata: {}
      region: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.lambda:
    docs:
      desc: "The `aws.lambda` resource can be used to assess the configuration of
        AWS Lambda. \n"
    fields:
      functions: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.lambda.function:
    docs:
      desc: |
        The `aws.lambda.function` provides fields for assessing the configuration of individual AWS Lambda functions. For usage see the `aws.lambda` resource documentation.
    fields:
      arn: {}
      concurrency: {}
      dlqTargetArn: {}
      name: {}
      policy: {}
      region: {}
      tags: {}
      vpcConfig: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.rds:
    docs:
      desc: |
        The `aws.rds` resource can be used to assess the configuration of AWS RDS deployments. The resource returns lists of `aws.rds.dbcluster`, `aws.rds.dbinstance`, and `aws.rds.snapshot` resources, each with fields for assessing the configuration of those assets.
    fields:
      dbClusters: {}
      dbInstances: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
    refs:
    - title: Security in Amazon RDS
      url: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.html
    snippets:
    - query: aws.rds.dbInstances.all(snapshots.length > 0)
      title: Checks whether RDS DB instances have backups enabled
    - query: aws.rds.dbInstances.all(multiAZ == true)
      title: Checks whether high availability is enabled for all rds instances
    - query: aws.rds.dbClusters { snapshots.where( encrypted == false) } { arn region
        id }
      title: Return a list of RDS Clusters across all regions where snapshots are
        not encrypted and return the `arn` `region` and `id` for the cluster
  aws.rds.dbcluster:
    docs:
      desc: |
        The `aws.rds.dbcluster` provides fields for assessing the configuration of AWS RDS Clusters.
    fields:
      arn: {}
      id: {}
      members: {}
      region: {}
      snapshots: {}
      tags: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.rds.dbinstance:
    docs:
      desc: |
        The `aws.rds.dbinstance` fields for assessing the configuration of RDS instances. For usage see the `aws.rds` resource documentation.
    fields:
      arn: {}
      backupRetentionPeriod: {}
      dbInstanceClass:
        min_mondoo_version: 5.19.1
      dbInstanceIdentifier:
        min_mondoo_version: 5.19.1
      deletionProtection: {}
      enabledCloudwatchLogsExports: {}
      engine:
        min_mondoo_version: 5.19.1
      enhancedMonitoringResourceArn: {}
      id: {}
      multiAZ: {}
      name: {}
      publiclyAccessible: {}
      region: {}
      securityGroups:
        min_mondoo_version: 5.19.1
      snapshots: {}
      status:
        min_mondoo_version: 5.19.1
      storageEncrypted: {}
      tags: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.rds.snapshot:
    docs:
      desc: |
        The `aws.rds.snapshot` fields for assessing the configuration of RDS snapshots. For usage see the `aws.rds` resource documentation.
    fields:
      arn: {}
      attributes: {}
      encrypted: {}
      id: {}
      isClusterSnapshot: {}
      region: {}
      tags: {}
      type: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.redshift:
    docs:
      desc: |
        The `aws.redshift` resource can be used to assess the configuration of AWS RedShift deployments. The resource returns lists of `aws.rds.dbcluster`, `aws.rds.dbinstance`, and `aws.rds.snapshot` resources, each with fields for assessing the configuration of those assets.
    fields:
      clusters: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
    refs:
    - title: Amazon Redshift security overview
      url: https://docs.aws.amazon.com/redshift/latest/dg/c_security-overview.html
    snippets:
    - query: |
        aws.redshift.clusters {
          arn
          encrypted
          nodeType
          allowVersionUpgrade
          preferredMaintenanceWindow
          automatedSnapshotRetentionPeriod
          publiclyAccessible
          parameters
          logging
          name
          region
          clusterParameterGroupNames
        }
      title: Return a list of Amazon RedShift clusters deployed across all enabled
        regions and the values for specified fields
    - query: |
        aws.redshift.clusters.where( encrypted == false ) {
          arn
          region
          name
        }
      title: Return a list of RedShift clusters that are not encrypted and the values
        for the `arn` `region` and `name` fields
  aws.redshift.cluster:
    fields:
      allowVersionUpgrade: {}
      arn: {}
      automatedSnapshotRetentionPeriod: {}
      clusterParameterGroupNames: {}
      encrypted: {}
      logging: {}
      name: {}
      nodeType: {}
      parameters: {}
      preferredMaintenanceWindow: {}
      publiclyAccessible: {}
      region: {}
      tags: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.s3:
    docs:
      desc: |
        Amazon Simple Storage Service (Amazon S3) is an object storage service
    fields:
      buckets: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
    refs:
    - title: Amazon S3 Product Page
      url: https://aws.amazon.com/s3/
    - title: 'AWS Documentation: What is Amazon S3?'
      url: https://docs.aws.amazon.com/AmazonS3/latest/userguide/Welcome.html
    snippets:
    - query: |
        aws.s3.buckets {
          arn
          name
          policy
          tags
          acl
          owner
          public
          cors
          location
          versioning
          logging
          staticWebsiteHosting
          defaultLock
          replication
          encryption
          publicAccessBlock
          exists
        }
      title: Return a list of AWS S3 buckets and the value for specified fields
    - query: "aws.s3.buckets.where( public == true ) {\n  arn\n  name\n  location\n
        \ tags\n  publicAccessBlock \n}\n"
      title: Return a list of AWS S3 buckets that are public and return the values
        for the `arn` `name` `location` `tags` and `publicAccessBlock`
    - query: "aws.s3.buckets.all( \n  replication['Rules'] { _['Status'] == \"Enabled\"
        }\n)\n"
      title: Checks whether S3 buckets have cross-region replication enabled
    - query: "aws.s3.buckets.all( \n  encryption['Rules'] { _['ApplyServerSideEncryptionByDefault']['KMSMasterKeyID']
        == /^arn:aws:kms:.*/}\n)\n"
      title: Checks that all buckets are encrypted with kms
  aws.s3.bucket:
    docs:
      desc: |
        The `aws.s3.bucket` resource provides fields for assessing the configuration of AWS S3 buckets. For usage see the `aws.s3` resource documentation.
    fields:
      acl: {}
      arn: {}
      cors: {}
      defaultLock: {}
      encryption: {}
      exists: {}
      location: {}
      logging: {}
      name: {}
      owner: {}
      policy: {}
      public: {}
      publicAccessBlock: {}
      replication: {}
      staticWebsiteHosting: {}
      tags: {}
      versioning: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
    refs:
    - title: Amazon S3 Product Page
      url: https://aws.amazon.com/s3/
    - title: 'AWS Documentation: Buckets overview'
      url: https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingBucket.html
  aws.s3.bucket.corsrule:
    fields:
      allowedHeaders: {}
      allowedMethods: {}
      allowedOrigins: {}
      exposeHeaders: {}
      maxAgeSeconds: {}
      name: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.s3.bucket.grant:
    fields:
      grantee: {}
      id: {}
      name: {}
      permission: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.s3.bucket.policy:
    docs:
      desc: |
        Bucket policies grant permission to your Amazon S3 resources
    fields:
      document: {}
      id: {}
      name: {}
      statements: {}
      version: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
    refs:
    - title: 'AWS Documentation: Using bucket policies'
      url: https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-policies.html
  aws.s3control:
    fields:
      accountPublicAccessBlock: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.sagemaker:
    fields:
      endpoints: {}
      notebookInstances: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.sagemaker.endpoint:
    fields:
      arn: {}
      config: {}
      name: {}
      region: {}
      tags: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.sagemaker.notebookinstance:
    fields:
      arn: {}
      details: {}
      name: {}
      region: {}
      tags: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.sagemaker.notebookinstance.details:
    fields:
      arn: {}
      directInternetAccess: {}
      kmsKey: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.secretsmanager:
    fields:
      secrets: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.secretsmanager.secret:
    fields:
      arn: {}
      name: {}
      rotationEnabled: {}
      tags: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.securityhub:
    fields:
      hubs: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.securityhub.hub:
    fields:
      arn: {}
      subscribedAt: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.sns:
    fields:
      topics: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.sns.subscription:
    fields:
      arn: {}
      protocol: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.sns.topic:
    fields:
      arn: {}
      attributes: {}
      region: {}
      subscriptions: {}
      tags:
        min_mondoo_version: 5.23.0
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.vpc:
    fields:
      arn: {}
      flowLogs: {}
      id: {}
      isDefault: {}
      region: {}
      routeTables: {}
      state: {}
      tags: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.vpc.flowlog:
    fields:
      id: {}
      region: {}
      status: {}
      tags: {}
      vpc: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  aws.vpc.routetable:
    fields:
      id: {}
      routes: {}
    is_private: true
    min_mondoo_version: 5.15.0
    platform:
      name:
      - aws
  azuread:
    fields:
      applications: {}
      domains: {}
      groups: {}
      servicePrincipals: {}
      users: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azuread.application:
    fields:
      id: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azuread.domain:
    fields:
      authenticationType: {}
      isDefault: {}
      isVerified: {}
      name: {}
      properties: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azuread.group:
    fields:
      displayName: {}
      id: {}
      mail: {}
      mailEnabled: {}
      mailNickname: {}
      members: {}
      objectType: {}
      properties: {}
      securityEnabled: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azuread.serviceprincipal:
    fields:
      id: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azuread.user:
    fields:
      accountEnabled: {}
      displayName: {}
      givenName: {}
      id: {}
      mail: {}
      mailNickname: {}
      objectType: {}
      properties: {}
      surname: {}
      userPrincipalName: {}
      userType: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm:
    fields:
      resources: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.compute:
    fields:
      disks: {}
      vms: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.compute.disk:
    fields:
      id: {}
      location: {}
      managedBy: {}
      managedByExtended: {}
      name: {}
      properties: {}
      sku: {}
      tags: {}
      type: {}
      zones: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.compute.vm:
    fields:
      dataDisks: {}
      extensions: {}
      id: {}
      location: {}
      name: {}
      osDisk: {}
      properties: {}
      tags: {}
      type: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.keyvault:
    fields:
      vaults: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.keyvault.certificate:
    fields:
      certName: {}
      created: {}
      enabled: {}
      expires: {}
      id: {}
      notBefore: {}
      recoveryLevel: {}
      tags: {}
      updated: {}
      version: {}
      versions: {}
      x5t: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.keyvault.key:
    fields:
      created: {}
      enabled: {}
      expires: {}
      keyName: {}
      kid: {}
      managed: {}
      notBefore: {}
      recoveryLevel: {}
      tags: {}
      updated: {}
      version: {}
      versions: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.keyvault.secret:
    fields:
      contentType: {}
      created: {}
      enabled: {}
      expires: {}
      id: {}
      managed: {}
      notBefore: {}
      secretName: {}
      tags: {}
      updated: {}
      version: {}
      versions: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.keyvault.vault:
    fields:
      certificates: {}
      diagnosticSettings: {}
      id: {}
      keys: {}
      location: {}
      properties: {}
      secrets: {}
      tags: {}
      type: {}
      vaultName: {}
      vaultUri: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.mariadb:
    fields:
      servers: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.mariadb.database:
    fields:
      charset: {}
      collation: {}
      id: {}
      name: {}
      type: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.mariadb.server:
    fields:
      configuration: {}
      databases: {}
      firewallRules: {}
      id: {}
      location: {}
      name: {}
      properties: {}
      tags: {}
      type: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.monitor:
    fields:
      logProfiles: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.monitor.diagnosticsetting:
    fields:
      id: {}
      name: {}
      properties: {}
      storageAccount: {}
      type: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.monitor.logprofile:
    fields:
      id: {}
      location: {}
      name: {}
      properties: {}
      storageAccount: {}
      tags: {}
      type: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.mysql:
    fields:
      servers: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.mysql.database:
    fields:
      charset: {}
      collation: {}
      id: {}
      name: {}
      type: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.mysql.server:
    fields:
      configuration: {}
      databases: {}
      firewallRules: {}
      id: {}
      location: {}
      name: {}
      properties: {}
      tags: {}
      type: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.network:
    fields:
      interfaces: {}
      securityGroups: {}
      watchers: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.network.interface:
    fields:
      etag: {}
      id: {}
      location: {}
      name: {}
      properties: {}
      tags: {}
      type: {}
      vm: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.network.securitygroup:
    fields:
      defaultSecurityRules: {}
      etag: {}
      id: {}
      interfaces: {}
      location: {}
      name: {}
      properties: {}
      securityRules: {}
      tags: {}
      type: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.network.securityrule:
    fields:
      destinationPortRange: {}
      etag: {}
      id: {}
      name: {}
      properties: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.network.watcher:
    fields:
      etag: {}
      id: {}
      location: {}
      name: {}
      properties: {}
      tags: {}
      type: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.postgresql:
    fields:
      servers: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.postgresql.database:
    fields:
      charset: {}
      collation: {}
      id: {}
      name: {}
      type: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.postgresql.server:
    fields:
      configuration: {}
      databases: {}
      firewallRules: {}
      id: {}
      location: {}
      name: {}
      properties: {}
      tags: {}
      type: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.resource:
    fields:
      changedTime: {}
      createdTime: {}
      id: {}
      identity: {}
      kind: {}
      location: {}
      managedBy: {}
      name: {}
      plan: {}
      provisioningState: {}
      sku: {}
      tags: {}
      type: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.sql:
    fields:
      servers: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.sql.configuration:
    fields:
      allowedValues: {}
      dataType: {}
      defaultValue: {}
      description: {}
      id: {}
      name: {}
      source: {}
      type: {}
      value: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.sql.database:
    fields:
      advisor: {}
      auditingPolicy: {}
      collation: {}
      connectionPolicy: {}
      containmentState: {}
      createMode: {}
      creationDate: {}
      currentServiceObjectiveId: {}
      databaseId: {}
      defaultSecondaryLocation: {}
      earliestRestoreDate: {}
      edition: {}
      elasticPoolName: {}
      failoverGroupId: {}
      id: {}
      maxSizeBytes: {}
      name: {}
      readScale: {}
      recommendedIndex: {}
      recoveryServicesRecoveryPointResourceId: {}
      requestedServiceObjectiveId: {}
      requestedServiceObjectiveName: {}
      restorePointInTime: {}
      sampleName: {}
      serviceLevelObjective: {}
      serviceTierAdvisors: {}
      sourceDatabaseDeletionDate: {}
      sourceDatabaseId: {}
      status: {}
      threadDetectionPolicy: {}
      transparentDataEncryption: {}
      type: {}
      usage: {}
      zoneRedundant: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.sql.databaseusage:
    fields:
      currentValue: {}
      displayName: {}
      id: {}
      limit: {}
      name: {}
      nextResetTime: {}
      resourceName: {}
      unit: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.sql.firewallrule:
    fields:
      endIpAddress: {}
      id: {}
      name: {}
      startIpAddress: {}
      type: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.sql.server:
    fields:
      auditingPolicy: {}
      azureAdAdministrators: {}
      connectionPolicy: {}
      databases: {}
      encryptionProtector: {}
      firewallRules: {}
      id: {}
      location: {}
      name: {}
      properties: {}
      securityAlertPolicy: {}
      tags: {}
      type: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.sql.server.administrator:
    fields:
      administratorType: {}
      id: {}
      login: {}
      name: {}
      sid: {}
      tenantId: {}
      type: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.storage:
    fields:
      accounts: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.storage.account:
    fields:
      containers: {}
      id: {}
      identity: {}
      kind: {}
      location: {}
      name: {}
      properties: {}
      sku: {}
      tags: {}
      type: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.storage.container:
    fields:
      etag: {}
      id: {}
      name: {}
      properties: {}
      type: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.web:
    fields:
      apps: {}
      availableRuntimes: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.web.appsite:
    fields:
      applicationSettings: {}
      authenticationSettings: {}
      configuration: {}
      connectionSettings: {}
      id: {}
      identity: {}
      kind: {}
      location: {}
      metadata: {}
      name: {}
      properties: {}
      stack: {}
      tags: {}
      type: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.web.appsiteauthsettings:
    fields:
      id: {}
      kind: {}
      name: {}
      properties: {}
      type: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  azurerm.web.appsiteconfig:
    fields:
      id: {}
      kind: {}
      name: {}
      properties: {}
      type: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - azure
  certificate:
    fields:
      authorityKeyID: {}
      crlDistributionPoints: {}
      expiresIn: {}
      extendedKeyUsage: {}
      extensions: {}
      fingerprints: {}
      isCA: {}
      isRevoked: {}
      isVerified:
        min_mondoo_version: 5.17.1
      issuer: {}
      issuingCertificateUrl: {}
      keyUsage: {}
      notAfter: {}
      notBefore: {}
      ocspServer: {}
      pem: {}
      policyIdentifier: {}
      revokedAt: {}
      serial: {}
      signature: {}
      signingAlgorithm: {}
      subject: {}
      subjectKeyID: {}
      version: {}
    min_mondoo_version: 5.15.0
  command:
    fields:
      command: {}
      exitcode: {}
      stderr: {}
      stdout: {}
    min_mondoo_version: 5.15.0
  container.image:
    fields:
      identifier: {}
      identifierType: {}
      name: {}
      repository: {}
    min_mondoo_version: 5.31.0
  container.repository:
    fields:
      fullName: {}
      name: {}
      registry: {}
      scheme: {}
    min_mondoo_version: 5.31.0
  dns:
    fields:
      dkim: {}
      fqdn: {}
      mx: {}
      params: {}
      records: {}
    maturity: experimental
    min_mondoo_version: 5.15.0
  dns.dkimRecord:
    fields:
      dnsTxt: {}
      domain: {}
      flags: {}
      hashAlgorithms: {}
      keyType: {}
      notes: {}
      publicKeyData: {}
      serviceTypes: {}
      valid: {}
      version: {}
    min_mondoo_version: 5.15.0
  dns.mxRecord:
    fields:
      domainName: {}
      name: {}
      preference: {}
    maturity: experimental
    min_mondoo_version: 5.15.0
  dns.record:
    fields:
      class: {}
      name: {}
      rdata: {}
      ttl: {}
      type: {}
    maturity: experimental
    min_mondoo_version: 5.15.0
  docker:
    fields:
      containers: {}
      images: {}
    min_mondoo_version: 5.15.0
  docker.container:
    fields:
      command: {}
      id: {}
      image: {}
      imageid: {}
      labels: {}
      names: {}
      state: {}
      status: {}
    min_mondoo_version: 5.15.0
  docker.image:
    fields:
      id: {}
      labels: {}
      size: {}
      tags: {}
      virtualsize: {}
    min_mondoo_version: 5.15.0
  domainName:
    fields:
      effectiveTLDPlusOne: {}
      fqdn: {}
      labels: {}
      tld: {}
      tldIcannManaged: {}
    min_mondoo_version: 5.15.0
  equinix.metal.device:
    fields:
      billingCycle: {}
      createdAt: {}
      description: {}
      hostname: {}
      id: {}
      locked: {}
      os: {}
      shortID: {}
      spotInstance: {}
      state: {}
      updatedAt: {}
      url: {}
    maturity: experimental
    min_mondoo_version: 5.15.0
    platform:
      name:
      - equinix
  equinix.metal.organization:
    fields:
      address: {}
      billingPhone: {}
      createdAt: {}
      creditAmount: {}
      description: {}
      id: {}
      mainPhone: {}
      name: {}
      taxId: {}
      twitter: {}
      updatedAt: {}
      url: {}
      website: {}
    maturity: experimental
    min_mondoo_version: 5.15.0
    platform:
      name:
      - equinix
  equinix.metal.project:
    fields:
      createdAt: {}
      devices: {}
      id: {}
      name: {}
      organization: {}
      paymentMethod: {}
      sshKeys: {}
      updatedAt: {}
      url: {}
      users: {}
    maturity: experimental
    min_mondoo_version: 5.15.0
    platform:
      name:
      - equinix
  equinix.metal.sshkey:
    fields:
      createdAt: {}
      fingerPrint: {}
      id: {}
      key: {}
      label: {}
      updatedAt: {}
      url: {}
    maturity: experimental
    min_mondoo_version: 5.15.0
    platform:
      name:
      - equinix
  equinix.metal.user:
    fields:
      avatarUrl: {}
      createdAt: {}
      email: {}
      facebook: {}
      firstName: {}
      fullName: {}
      id: {}
      lastName: {}
      linkedin: {}
      phoneNumber: {}
      timezone: {}
      twitter: {}
      twoFactorAuth: {}
      updatedAt: {}
      url: {}
      vpn: {}
    maturity: experimental
    min_mondoo_version: 5.15.0
    platform:
      name:
      - equinix
  esxi:
    docs:
      desc: |
        The `exsi.host` and `esxi.vm` resource is deprecated. Please use `vsphere.host` and `vsphere.vm` instead.
    fields:
      host: {}
      vm: {}
    maturity: deprecated
    min_mondoo_version: 5.15.0
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
    snippets:
    - query: |
        esxi.host {
          kernelModules {
            signedStatus == "Signed"
          }
        }
      title: Check that all kernel modules are signed
  esxi.command:
    fields:
      command: {}
      inventoryPath: {}
      result: {}
    min_mondoo_version: 5.27.0
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
  esxi.kernelmodule:
    fields:
      enabled: {}
      license: {}
      loaded: {}
      modulefile: {}
      name: {}
      signatureDigest: {}
      signatureFingerprint: {}
      signedStatus: {}
      version: {}
      vibAcceptanceLevel: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
  esxi.ntpconfig:
    fields:
      config: {}
      id: {}
      server: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
  esxi.service:
    fields:
      key: {}
      label: {}
      policy: {}
      required: {}
      ruleset: {}
      running: {}
      uninstallable: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
  esxi.timezone:
    fields:
      description: {}
      key: {}
      name: {}
      offset: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
  esxi.vib:
    fields:
      acceptanceLevel: {}
      creationDate: {}
      id: {}
      installDate: {}
      name: {}
      status: {}
      vendor: {}
      version: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
  file:
    fields:
      basename: {}
      content: {}
      dirname: {}
      empty:
        min_mondoo_version: 5.18.0
      exists: {}
      group: {}
      path: {}
      permissions: {}
      size: {}
      user: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: |
        file('/etc') {
          exists
          permissions.isDirectory
        }
      title: Test if a directory exists
  file.permissions:
    fields:
      group_executable: {}
      group_readable: {}
      group_writeable: {}
      isDirectory: {}
      isFile: {}
      isSymlink: {}
      mode: {}
      other_executable: {}
      other_readable: {}
      other_writeable: {}
      sgid: {}
      sticky: {}
      suid: {}
      user_executable: {}
      user_readable: {}
      user_writeable: {}
    is_private: true
    min_mondoo_version: 5.15.0
  files.find:
    fields:
      from: {}
      name: {}
      permissions: {}
      regex: {}
      type: {}
      xdev: {}
    min_mondoo_version: 5.15.0
  gcloud.compute:
    fields:
      instances: {}
    min_mondoo_version: 5.15.0
  gcloud.compute.instance:
    fields:
      cpuPlatform: {}
      deletionProtection: {}
      description: {}
      hostname: {}
      id: {}
      labels: {}
      metadata: {}
      name: {}
      serviceAccounts: {}
      status: {}
      statusMessage: {}
      tags: {}
    min_mondoo_version: 5.15.0
  gcloud.compute.serviceaccount:
    fields:
      email: {}
      scopes: {}
    min_mondoo_version: 5.15.0
  gcloud.organization:
    fields:
      iamPolicy: {}
      id: {}
      lifecycleState: {}
      name: {}
    min_mondoo_version: 5.15.0
  gcloud.project:
    fields:
      createTime: {}
      iamPolicy: {}
      id: {}
      labels: {}
      lifecycleState: {}
      name: {}
      number: {}
    min_mondoo_version: 5.15.0
  gcloud.resourcemanager.binding:
    fields:
      id: {}
      members: {}
      role: {}
    min_mondoo_version: 5.15.0
  gcloud.sql:
    fields:
      instances: {}
    min_mondoo_version: 5.15.0
  gcloud.sql.instance:
    fields:
      backendType: {}
      connectionName: {}
      currentDiskSize: {}
      databaseVersion: {}
      gceZone: {}
      instanceType: {}
      kind: {}
      maxDiskSize: {}
      name: {}
      project: {}
      region: {}
      serviceAccountEmailAddress: {}
      settings: {}
      state: {}
    min_mondoo_version: 5.15.0
  gcloud.storage:
    fields:
      buckets: {}
    min_mondoo_version: 5.15.0
  gcloud.storage.bucket:
    fields:
      created: {}
      iamConfiguration: {}
      iamPolicy: {}
      id: {}
      kind: {}
      labels: {}
      location: {}
      locationType: {}
      name: {}
      projectNumber: {}
      storageClass: {}
      updated: {}
    min_mondoo_version: 5.15.0
  github.installation:
    fields:
      appId: {}
      appSlug: {}
      createdAt: {}
      id: {}
      updatedAt: {}
    is_private: true
    min_mondoo_version: 5.31.0
  github.organization:
    fields:
      billing_email: {}
      blog: {}
      collaborators: {}
      company: {}
      created_at: {}
      default_repository_permission: {}
      description: {}
      disk_usage: {}
      email: {}
      id: {}
      installations:
        min_mondoo_version: 5.31.0
      is_verified: {}
      location: {}
      login: {}
      members:
        min_mondoo_version: 5.31.0
      members_can_create_internal_repositories: {}
      members_can_create_pages: {}
      members_can_create_private_pages: {}
      members_can_create_private_repositories: {}
      members_can_create_public_pages: {}
      members_can_create_public_repositories: {}
      members_can_create_repositories: {}
      name: {}
      node_id: {}
      owned_private_repos: {}
      owners:
        min_mondoo_version: 5.31.0
      plan: {}
      private_gists: {}
      repositories:
        min_mondoo_version: 5.31.0
      total_private_repos: {}
      twitter_username: {}
      two_factor_requirement_enabled: {}
      updated_at: {}
    maturity: experimental
    min_mondoo_version: 5.15.0
  github.repository:
    fields:
      archived: {}
      createdAt: {}
      description: {}
      disabled: {}
      fullName: {}
      homepage: {}
      id: {}
      name: {}
      private: {}
      updatedAt: {}
      visibility: {}
    is_private: true
    min_mondoo_version: 5.31.0
  github.user:
    fields:
      bio: {}
      createdAt: {}
      email: {}
      id: {}
      login: {}
      name: {}
      suspendedAt: {}
      updatedAt: {}
    is_private: true
    min_mondoo_version: 5.31.0
  gitlab.group:
    fields:
      description: {}
      id: {}
      name: {}
      path: {}
      projects: {}
      requireTwoFactorAuthentication: {}
      visibility: {}
    maturity: experimental
    min_mondoo_version: 5.15.0
  gitlab.project:
    fields:
      description: {}
      id: {}
      name: {}
      path: {}
      visibility: {}
    maturity: experimental
    min_mondoo_version: 5.15.0
  group:
    fields:
      gid: {}
      members: {}
      name: {}
      sid: {}
    min_mondoo_version: 5.15.0
  groups:
    fields: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: groups.where(name == 'wheel').list { members.all( name != 'username')
        }
      title: Ensure the user is not part of group
  ip6tables:
    fields:
      input: {}
      output: {}
    min_mondoo_version: 5.15.0
  ipmi:
    fields:
      deviceID: {}
      guid: {}
    maturity: experimental
    min_mondoo_version: 5.15.0
  ipmi.chassis:
    fields:
      status: {}
      systemBootOptions: {}
    maturity: experimental
    min_mondoo_version: 5.15.0
  iptables:
    fields:
      input: {}
      output: {}
    min_mondoo_version: 5.15.0
  iptables.entry:
    fields:
      bytes: {}
      chain: {}
      destination: {}
      in: {}
      lineNumber: {}
      opt: {}
      options: {}
      out: {}
      packets: {}
      protocol: {}
      source: {}
      target: {}
    min_mondoo_version: 5.15.0
  k8s:
    fields:
      apiResources: {}
      clusterrolebindings:
        min_mondoo_version: 5.31.0
      clusterroles:
        min_mondoo_version: 5.31.0
      configmaps:
        min_mondoo_version: 5.31.0
      cronjobs: {}
      daemonsets: {}
      deployments: {}
      jobs: {}
      namespaces: {}
      networkPolicies:
        min_mondoo_version: 5.31.0
      nodes: {}
      podSecurityPolicies:
        min_mondoo_version: 5.31.0
      pods: {}
      rolebindings:
        min_mondoo_version: 5.31.0
      roles:
        min_mondoo_version: 5.31.0
      secrets:
        min_mondoo_version: 5.26.0
      serverVersion: {}
      serviceaccounts:
        min_mondoo_version: 5.31.0
      services:
        min_mondoo_version: 5.31.0
    min_mondoo_version: 5.15.0
    platform:
      name:
      - kubernetes
    snippets:
    - query: k8s.pods { containers.where(securityContext["privileged"] == true) name
        }
      title: List kubernetes pods with privileged containers
    - query: k8s.pods.all( namespace != "default")
      title: Check if the default namespace is used
    - query: k8s.serviceaccounts { name namespace secrets  }
      title: Query services accounts
    - query: k8s.roles { name namespace rules  }
      title: Query RBAC cluster roles
    - query: k8s.rolebindings { name namespace subjects  }
      title: Query RBAC role bindings
    - query: k8s.clusterrolebindings { name subjects  }
      title: Query RBAC cluster role bindings
    - query: k8s.podSecurityPolicies { name manifest }
      title: Query pod security policies
    - query: k8s.networkPolicies { name manifest }
      title: Query network policies
  k8s.apiresource:
    fields:
      categories: {}
      group: {}
      kind: {}
      name: {}
      namespaced: {}
      shortNames: {}
      singularName: {}
      version: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - kubernetes
  k8s.configmap:
    fields:
      annotations: {}
      created: {}
      data: {}
      kind: {}
      labels: {}
      manifest: {}
      name: {}
      namespace: {}
      resourceVersion: {}
      uid: {}
    min_mondoo_version: 5.31.0
    platform:
      name:
      - kubernetes
  k8s.container:
    fields:
      args: {}
      command: {}
      containerImage:
        min_mondoo_version: 5.31.0
      image: {}
      imageName:
        min_mondoo_version: 5.31.0
      imagePullPolicy: {}
      livenessProbe: {}
      name: {}
      readinessProbe: {}
      resources: {}
      securityContext: {}
      tty: {}
      uid: {}
      volumeDevices: {}
      volumeMounts: {}
      workingDir: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - kubernetes
  k8s.cronjob:
    fields:
      annotations:
        min_mondoo_version: 5.29.2
      created: {}
      kind: {}
      labels:
        min_mondoo_version: 5.29.2
      manifest: {}
      name: {}
      namespace: {}
      resourceVersion:
        min_mondoo_version: 5.29.2
      uid: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - kubernetes
  k8s.daemonset:
    fields:
      annotations:
        min_mondoo_version: 5.29.2
      created: {}
      kind: {}
      labels:
        min_mondoo_version: 5.29.2
      manifest: {}
      name: {}
      namespace: {}
      resourceVersion:
        min_mondoo_version: 5.29.2
      uid: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - kubernetes
  k8s.deployment:
    fields:
      annotations:
        min_mondoo_version: 5.29.2
      created: {}
      kind: {}
      labels:
        min_mondoo_version: 5.29.2
      manifest: {}
      name: {}
      namespace: {}
      resourceVersion:
        min_mondoo_version: 5.29.2
      uid: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - kubernetes
  k8s.job:
    fields:
      annotations:
        min_mondoo_version: 5.29.2
      created: {}
      kind: {}
      labels:
        min_mondoo_version: 5.29.2
      manifest: {}
      name: {}
      namespace: {}
      resourceVersion:
        min_mondoo_version: 5.29.2
      uid: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - kubernetes
  k8s.namespace:
    fields:
      created: {}
      manifest: {}
      name: {}
      uid: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - kubernetes
  k8s.networkpolicy:
    fields:
      annotations: {}
      created: {}
      kind: {}
      labels: {}
      manifest: {}
      name: {}
      namespace: {}
      resourceVersion: {}
      spec: {}
      uid: {}
    min_mondoo_version: 5.31.0
    platform:
      name:
      - kubernetes
  k8s.node:
    fields:
      annotations:
        min_mondoo_version: 5.29.2
      kind: {}
      labels:
        min_mondoo_version: 5.29.2
      name: {}
      resourceVersion:
        min_mondoo_version: 5.29.2
      uid: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - kubernetes
  k8s.pod:
    fields:
      annotations: {}
      apiVersion: {}
      containers: {}
      created: {}
      kind: {}
      labels: {}
      manifest: {}
      name: {}
      namespace: {}
      node: {}
      podSpec: {}
      resourceVersion:
        min_mondoo_version: 5.29.2
      uid: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - kubernetes
  k8s.podsecuritypolicy:
    fields:
      annotations: {}
      created: {}
      kind: {}
      labels: {}
      manifest: {}
      name: {}
      resourceVersion: {}
      spec: {}
      uid: {}
    min_mondoo_version: 5.31.0
    platform:
      name:
      - kubernetes
  k8s.rbac.clusterrole:
    fields:
      aggregationRule: {}
      annotations: {}
      created: {}
      kind: {}
      labels: {}
      manifest: {}
      name: {}
      resourceVersion: {}
      rules: {}
      uid: {}
    min_mondoo_version: 5.31.0
    platform:
      name:
      - kubernetes
  k8s.rbac.clusterrolebinding:
    fields:
      annotations: {}
      created: {}
      kind: {}
      labels: {}
      manifest: {}
      name: {}
      resourceVersion: {}
      roleRef: {}
      subjects: {}
      uid: {}
    min_mondoo_version: 5.31.0
    platform:
      name:
      - kubernetes
  k8s.rbac.role:
    fields:
      annotations: {}
      created: {}
      kind: {}
      labels: {}
      manifest: {}
      name: {}
      namespace: {}
      resourceVersion: {}
      rules: {}
      uid: {}
    min_mondoo_version: 5.31.0
    platform:
      name:
      - kubernetes
  k8s.rbac.rolebinding:
    fields:
      annotations: {}
      created: {}
      kind: {}
      labels: {}
      manifest: {}
      name: {}
      namespace: {}
      resourceVersion: {}
      roleRef: {}
      subjects: {}
      uid: {}
    min_mondoo_version: 5.31.0
    platform:
      name:
      - kubernetes
  k8s.secret:
    fields:
      annotations:
        min_mondoo_version: 5.29.2
      certificates:
        min_mondoo_version: 5.29.2
      created: {}
      kind: {}
      labels:
        min_mondoo_version: 5.29.2
      manifest: {}
      name: {}
      namespace: {}
      resourceVersion:
        min_mondoo_version: 5.29.2
      type:
        min_mondoo_version: 5.29.2
      uid: {}
    min_mondoo_version: 5.26.0
    platform:
      name:
      - kubernetes
  k8s.service:
    fields:
      annotations: {}
      created: {}
      kind: {}
      labels: {}
      manifest: {}
      name: {}
      namespace: {}
      resourceVersion: {}
      spec: {}
      uid: {}
    min_mondoo_version: 5.31.0
    platform:
      name:
      - kubernetes
  k8s.serviceaccount:
    fields:
      annotations: {}
      automountServiceAccountToken: {}
      created: {}
      imagePullSecrets: {}
      kind: {}
      labels: {}
      manifest: {}
      name: {}
      namespace: {}
      resourceVersion: {}
      secrets: {}
      uid: {}
    min_mondoo_version: 5.31.0
    platform:
      name:
      - kubernetes
  kernel:
    fields:
      info: {}
      installed: {}
      modules: {}
      parameters: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: kernel.modules { name loaded size }
      title: List all kernel modules
    - query: kernel.modules.where( loaded == true ) { name }
      title: List all loaded kernel modules
    - query: kernel { info }
      title: List all information from running kernel
    - query: kernel { info['version'] }
      title: List version from running kernel
  kernel.module:
    fields:
      loaded: {}
      name: {}
      size: {}
    min_mondoo_version: 5.15.0
  logindefs:
    fields:
      content: {}
      file: {}
      params: {}
    min_mondoo_version: 5.15.0
  lsblk:
    fields: {}
    min_mondoo_version: 5.15.0
  lsblk.entry:
    fields:
      fstype: {}
      label: {}
      mountpoints: {}
      name: {}
      uuid: {}
    min_mondoo_version: 5.15.0
  machine:
    fields: {}
    min_mondoo_version: 5.15.0
  machine.baseboard:
    fields:
      assetTag: {}
      manufacturer: {}
      product: {}
      serial: {}
      version: {}
    min_mondoo_version: 5.15.0
  machine.bios:
    fields:
      releaseDate: {}
      vendor: {}
      version: {}
    min_mondoo_version: 5.15.0
  machine.chassis:
    fields:
      assetTag: {}
      manufacturer: {}
      serial: {}
      version: {}
    min_mondoo_version: 5.15.0
  machine.system:
    fields:
      family: {}
      manufacturer: {}
      product: {}
      serial: {}
      sku: {}
      uuid: {}
      version: {}
    min_mondoo_version: 5.15.0
  macos:
    fields:
      globalAccountPolicies: {}
      userHostPreferences: {}
      userPreferences: {}
    min_mondoo_version: 5.15.0
  macos.alf:
    fields:
      allowDownloadSignedEnabled: {}
      allowSignedEnabled: {}
      applications: {}
      expections: {}
      explicitAuths: {}
      firewallUnload: {}
      globalState: {}
      loggingEnabled: {}
      loggingOption: {}
      stealthEnabled: {}
      version: {}
    min_mondoo_version: 5.15.0
  macos.security:
    fields:
      authorizationDB: {}
    min_mondoo_version: 5.15.0
  macos.systemsetup:
    fields:
      allowPowerButtonToSleepComputer: {}
      computerName: {}
      date: {}
      disableKeyboardWhenEnclosureLockIsEngaged: {}
      displaySleep: {}
      harddiskSleep: {}
      localSubnetName: {}
      networkTimeServer: {}
      remoteAppleEvents: {}
      remoteLogin: {}
      restartFreeze: {}
      restartPowerFailure: {}
      sleep: {}
      startupDisk: {}
      time: {}
      timeZone: {}
      usingNetworkTime: {}
      waitForStartupAfterPowerFailure: {}
      wakeOnModem: {}
      wakeOnNetworkAccess: {}
    min_mondoo_version: 5.15.0
  macos.timemachine:
    fields:
      preferences: {}
    min_mondoo_version: 5.15.0
  mondoo:
    fields:
      build: {}
      capabilities: {}
      jobEnvironment: {}
      nulllist: {}
      resources: {}
      version: {}
    min_mondoo_version: 5.15.0
  mondoo.asset:
    fields:
      platformIDs: {}
    min_mondoo_version: 5.15.0
  mondoo.eol:
    fields:
      date: {}
      product: {}
      version: {}
    min_mondoo_version: 5.15.0
  mount:
    fields: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: mount.list { path device fstype options }
      title: List all mount points
    - query: mount.one( path == "/" )
      title: Ensure the mountpoint exists
    - query: |
        mount.where( path == "/" ).list {
          device == '/dev/mapper/vg00-lv_root'
          fstype == 'xfs'
          options['rw'] != null
          options['relatime'] != null
          options['seclabel'] != null
          options['attr2'] != null
          options['inode64'] != null
          options['noquota'] != null
        }
      title: Check mountpoint configuration
  mount.point:
    fields:
      device: {}
      fstype: {}
      mounted: {}
      options: {}
      path: {}
    min_mondoo_version: 5.15.0
  ms365.exchangeonline:
    fields:
      adminAuditLogConfig: {}
      antiPhishPolicy: {}
      atpPolicyForO365: {}
      authenticationPolicy: {}
      dkimSigningConfig: {}
      hostedOutboundSpamFilterPolicy: {}
      mailbox: {}
      malwareFilterPolicy: {}
      organizationConfig: {}
      owaMailboxPolicy: {}
      phishFilterPolicy: {}
      remoteDomain: {}
      roleAssignmentPolicy: {}
      safeAttachmentPolicy: {}
      safeLinksPolicy: {}
      sharingPolicy: {}
      transportRule: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - microsoft365
  ms365.sharepointonline:
    fields:
      spoTenant: {}
      spoTenantSyncClientRestriction: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - microsoft365
  ms365.teams:
    fields:
      csOAuthConfiguration: {}
      csTeamsClientConfiguration: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - microsoft365
  msgraph.beta:
    fields:
      applications: {}
      domains: {}
      organizations: {}
      settings: {}
      users: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - microsoft365
  msgraph.beta.application:
    fields:
      appId: {}
      createdDateTime: {}
      displayName: {}
      id: {}
      identifierUris: {}
      publisherDomain: {}
      signInAudience: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - microsoft365
  msgraph.beta.devicemanagement:
    fields:
      deviceCompliancePolicies: {}
      deviceConfigurations: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - microsoft365
  msgraph.beta.devicemanagement.devicecompliancepolicy:
    fields:
      assignments: {}
      createdDateTime: {}
      description: {}
      displayName: {}
      id: {}
      lastModifiedDateTime: {}
      properties: {}
      roleScopeTagIds: {}
      version: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - microsoft365
  msgraph.beta.devicemanagement.deviceconfiguration:
    fields:
      createdDateTime: {}
      description: {}
      displayName: {}
      id: {}
      lastModifiedDateTime: {}
      properties: {}
      roleScopeTagIds: {}
      supportsScopeTags: {}
      version: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - microsoft365
  msgraph.beta.domain:
    fields:
      authenticationType: {}
      availabilityStatus: {}
      id: {}
      isAdminManaged: {}
      isDefault: {}
      isInitial: {}
      isRoot: {}
      isVerified: {}
      passwordNotificationWindowInDays: {}
      passwordValidityPeriodInDays: {}
      serviceConfigurationRecords: {}
      supportedServices: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - microsoft365
  msgraph.beta.domaindnsrecord:
    fields:
      id: {}
      isOptional: {}
      label: {}
      properties: {}
      recordType: {}
      supportedService: {}
      ttl: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - microsoft365
  msgraph.beta.organization:
    fields:
      assignedPlans: {}
      createdDateTime: {}
      displayName: {}
      id: {}
      verifiedDomains: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - microsoft365
  msgraph.beta.policies:
    fields:
      adminConsentRequestPolicy: {}
      authorizationPolicy: {}
      identitySecurityDefaultsEnforcementPolicy: {}
      permissionGrantPolicies: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - microsoft365
  msgraph.beta.rolemanagement:
    fields:
      roleDefinitions: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - microsoft365
  msgraph.beta.rolemanagement.roleassignment:
    fields:
      id: {}
      principal: {}
      principalId: {}
      roleDefinitionId: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - microsoft365
  msgraph.beta.rolemanagement.roledefinition:
    fields:
      assignments: {}
      description: {}
      displayName: {}
      id: {}
      isBuiltIn: {}
      isEnabled: {}
      rolePermissions: {}
      templateId: {}
      version: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - microsoft365
  msgraph.beta.security:
    fields:
      latestSecureScores: {}
      secureScores: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - microsoft365
  msgraph.beta.security.securityscore:
    fields:
      activeUserCount: {}
      averageComparativeScores: {}
      azureTenantId: {}
      controlScores: {}
      createdDateTime: {}
      currentScore: {}
      enabledServices: {}
      id: {}
      licensedUserCount: {}
      maxScore: {}
      vendorInformation: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - microsoft365
  msgraph.beta.user:
    fields:
      accountEnabled: {}
      city: {}
      companyName: {}
      country: {}
      createdDateTime: {}
      department: {}
      displayName: {}
      employeeId: {}
      givenName: {}
      id: {}
      jobTitle: {}
      mail: {}
      mobilePhone: {}
      officeLocation: {}
      otherMails: {}
      postalCode: {}
      settings: {}
      state: {}
      streetAddress: {}
      surname: {}
      userPrincipalName: {}
      userType: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - microsoft365
  ntp.conf:
    fields:
      content: {}
      file: {}
      fudge: {}
      restrict: {}
      servers: {}
      settings: {}
    min_mondoo_version: 5.15.0
  os:
    fields:
      env: {}
      hostname: {}
      machineid: {}
      name: {}
      path: {}
      rebootpending: {}
      updates: {}
      uptime: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: os.env
      title: Show all environment variables
    - query: os.env['windir']
      title: Retrieve a single environment variable
  os.rootCertificates:
    fields:
      content: {}
      files: {}
    min_mondoo_version: 5.15.0
  os.rootcertificates:
    fields: {}
    min_mondoo_version: 5.15.0
  os.update:
    fields:
      category: {}
      format: {}
      name: {}
      restart: {}
      severity: {}
    min_mondoo_version: 5.15.0
  package:
    fields:
      arch: {}
      available: {}
      description: {}
      epoch: {}
      format: {}
      installed: {}
      name: {}
      origin: {}
      outdated: {}
      status: {}
      version: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: package('git').installed
      title: Check if a package is installed
  packages:
    fields: {}
    min_mondoo_version: 5.15.0
  pam.conf:
    fields:
      content: {}
      entries: {}
      files: {}
      services: {}
    min_mondoo_version: 5.15.0
  pam.conf.serviceEntry:
    fields:
      control: {}
      lineNumber: {}
      module: {}
      options: {}
      pamType: {}
      service: {}
    is_private: true
    min_mondoo_version: 5.15.0
  parse:
    fields: {}
    min_mondoo_version: 5.15.0
  parse.certificates:
    fields:
      content: {}
      file: {}
      path: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: parse.certificates('/etc/ssl/cert.pem').list { issuer.dn }
      title: Parse Certificates from target file system
    - query: 'parse.certificates(content: ''PEM CONTENT'').list { issuer.dn }'
      title: Parse Certificates from content
  parse.ini:
    fields:
      content: {}
      delimiter: {}
      file: {}
      params: {}
      sections: {}
    min_mondoo_version: 5.15.0
  parse.json:
    fields:
      content: {}
      file: {}
      params: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: 'parse.json(content: ''{ "a": "b"  }'').params'
      title: Parse JSON from string content
    - query: parse.json("/path/to/test.json").params
      title: Parse JSON from file
  parse.plist:
    fields:
      content: {}
      file: {}
      params: {}
    min_mondoo_version: 5.15.0
  parse.yaml:
    fields:
      content: {}
      file: {}
      params: {}
    min_mondoo_version: 5.15.0
  pkix.extension:
    fields:
      critical: {}
      identifier: {}
      value: {}
    min_mondoo_version: 5.15.0
  pkix.name:
    fields:
      commonName: {}
      country: {}
      dn: {}
      extraNames: {}
      id: {}
      locality: {}
      names: {}
      organization: {}
      organizationalUnit: {}
      postalCode: {}
      province: {}
      serialNumber: {}
      streetAddress: {}
    min_mondoo_version: 5.15.0
  platform:
    fields:
      arch: {}
      build: {}
      family: {}
      fqdn: {}
      kind: {}
      name: {}
      release: {}
      runtimeEnv: {}
      title: {}
      vulnerabilityReport: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: platform { name release }
      title: Platform Name and Release
  platform.advisories:
    fields:
      cvss: {}
      stats: {}
    min_mondoo_version: 5.15.0
  platform.cves:
    fields:
      cvss: {}
      stats: {}
    min_mondoo_version: 5.15.0
  platform.eol:
    fields:
      date: {}
      docsUrl: {}
      productUrl: {}
    min_mondoo_version: 5.15.0
  platform.exploits:
    fields:
      cvss: {}
      stats: {}
    min_mondoo_version: 5.15.0
  platform.virtualization:
    fields:
      isContainer: {}
    min_mondoo_version: 5.15.0
  port:
    fields:
      address: {}
      port: {}
      process: {}
      protocol: {}
      remoteAddress: {}
      remotePort: {}
      state: {}
      user: {}
    min_mondoo_version: 5.15.0
  ports:
    fields:
      listening: {}
    min_mondoo_version: 5.15.0
  powershell:
    fields:
      exitcode: {}
      script: {}
      stderr: {}
      stdout: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: |
        powershell('Get-WmiObject -Class Win32_volume -Filter "DriveType=3"| Select Label') {
          stdout == /PAGEFILE/
          stderr == ''
        }
      title: Run custom powershell command
    - query: |
        powershell('tzutil /g') {
          stdout.trim == 'GMT Standard Time'
          stderr == ''
        }
      title: Check the timezone
  privatekey:
    fields:
      encrypted: {}
      path: {}
      pem: {}
    min_mondoo_version: 5.15.0
  process:
    fields:
      command: {}
      executable: {}
      flags: {}
      pid: {}
      state: {}
    min_mondoo_version: 5.15.0
  processes:
    fields: {}
    min_mondoo_version: 5.15.0
  regex:
    fields:
      creditCard: {}
      email: {}
      emoji: {}
      ipv4: {}
      ipv6: {}
      mac: {}
      semver: {}
      url: {}
      uuid: {}
    min_mondoo_version: 5.15.0
  registrykey:
    fields:
      children: {}
      exists: {}
      path: {}
      properties: {}
    min_mondoo_version: 5.15.0
  registrykey.property:
    fields:
      exists: {}
      name: {}
      path: {}
      value: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: |
        registrykey.property(path: 'HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\EventLog\System', name: 'MaxSize') {
          value >= 32768
        }
      title: Verify a registry key property
  rsyslog.conf:
    fields:
      content: {}
      files: {}
      settings: {}
    min_mondoo_version: 5.15.0
  secpol:
    fields:
      eventaudit: {}
      privilegerights: {}
      registryvalues: {}
      systemaccess: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: secpol.privilegerights['SeRemoteShutdownPrivilege'].contains( _ == 'S-1-5-32-544')
      title: Check that a specific SID is included in the privilege rights
  service:
    fields:
      description: {}
      enabled: {}
      installed: {}
      masked: {}
      name: {}
      running: {}
      type: {}
    min_mondoo_version: 5.15.0
  services:
    fields: {}
    min_mondoo_version: 5.15.0
  shadow:
    fields: {}
    min_mondoo_version: 5.15.0
  shadow.entry:
    fields:
      expirydates: {}
      inactivedays: {}
      lastchanged: {}
      maxdays: {}
      mindays: {}
      password: {}
      reserved: {}
      user: {}
      warndays: {}
    min_mondoo_version: 5.15.0
  socket:
    fields:
      address: {}
      port: {}
      protocol: {}
    min_mondoo_version: 5.15.0
  socketstats:
    fields:
      openPorts: {}
    min_mondoo_version: 5.15.0
  sshd:
    fields: {}
    min_mondoo_version: 5.15.0
  sshd.config:
    fields:
      ciphers: {}
      content: {}
      file: {}
      hostkeys: {}
      kexs: {}
      macs: {}
      params: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: sshd.config.params['Banner'] == '/etc/ssh/sshd-banner'
      title: Check the ssh banner setting
  terraform:
    fields:
      blocks: {}
      datasources: {}
      files: {}
      modules: {}
      outputs: {}
      providers: {}
      resources: {}
      tfvars: {}
      variables: {}
    maturity: experimental
    min_mondoo_version: 5.15.0
    platform:
      name:
      - terraform
    snippets:
    - query: terraform.blocks { nameLabel arguments }
      title: Display all Terraform blocks and their arguments
    - query: terraform.datasources { nameLabel arguments }
      title: Display all data blocks
    - query: terraform.resources { nameLabel arguments }
      title: Display all resource blocks
  terraform.block:
    fields:
      arguments: {}
      attributes: {}
      blocks: {}
      end: {}
      labels: {}
      nameLabel: {}
      snippet: {}
      start: {}
      type: {}
    maturity: experimental
    min_mondoo_version: 5.15.0
    platform:
      name:
      - terraform
    snippets:
    - query: terraform.blocks { nameLabel arguments }
      title: Display all Terraform blocks and their arguments
  terraform.file:
    fields:
      blocks: {}
      path: {}
    maturity: experimental
    min_mondoo_version: 5.15.0
    platform:
      name:
      - terraform
    snippets:
    - query: terraform.files { path blocks { nameLabel } }
      title: Display all files and their blocks
  terraform.fileposition:
    fields:
      byte: {}
      column: {}
      line: {}
      path: {}
    maturity: experimental
    min_mondoo_version: 5.15.0
    platform:
      name:
      - terraform
  terraform.module:
    fields:
      dir: {}
      key: {}
      source: {}
      version: {}
    maturity: experimental
    min_mondoo_version: 5.15.0
    platform:
      name:
      - terraform
    snippets:
    - query: terraform.modules { key version source}
      title: Display all loaded Terraform modules
  terraform.settings:
    fields:
      block: {}
      requiredProviders: {}
    min_mondoo_version: 5.31.0
    platform:
      name:
      - terraform
  time:
    fields:
      day: {}
      hour: {}
      minute: {}
      now: {}
      second: {}
      today: {}
      tomorrow: {}
    min_mondoo_version: 5.15.0
  tls:
    fields:
      certificates: {}
      ciphers: {}
      domainName: {}
      extensions: {}
      nonSniCertificates: {}
      params: {}
      socket: {}
      versions: {}
    min_mondoo_version: 5.15.0
  user:
    fields:
      authorizedkeys: {}
      enabled: {}
      gid: {}
      group: {}
      home: {}
      name: {}
      shell: {}
      sid: {}
      sshkeys: {}
      uid: {}
    min_mondoo_version: 5.15.0
  users:
    fields: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: users.list { uid name }
      title: Display all users and their uid
    - query: users.one( name == 'root')
      title: Ensure user exists
    - query: users.none(name == "vagrant")
      title: Ensure user does not exist
    - query: |
        users.where( sid == /S-1-5-21-\d+-\d+-\d+-501/ ).list {
          name != "Guest"
        }
      title: Search for a specific SID and check for its values
  uuid:
    fields:
      urn: {}
      value: {}
      variant: {}
      version: {}
    min_mondoo_version: 5.15.0
  vsphere:
    fields:
      about: {}
      datacenters: {}
      licenses: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
    snippets:
    - query: vsphere.about
      title: Display Information about the vSphere environment
    - query: vsphere.datacenters { hosts { moid properties } }
      title: Display ESXi host moid and properties
    - query: vsphere.datacenters { hosts { ntp.server } }
      title: Display NTP server for all ESXi hosts
    - query: vsphere.datacenters { hosts { ntp.server.any(_ == "10.31.21.2") } }
      title: Ensure a specific NTP Server is set
    - query: |
        vsphere.datacenters {
          hosts {
            vmknics.where(tags == "Management") {
              properties['Enabled'] == true
              properties['MTU'] == 1500
              properties['VDSName'] != /(?i)storage/
            }
          }
        }
      title: Ensure specific VmkNics properties for all management VmkNics
  vsphere.cluster:
    fields:
      hosts: {}
      inventoryPath: {}
      moid: {}
      name: {}
      properties: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
  vsphere.datacenter:
    fields:
      clusters: {}
      hosts: {}
      inventoryPath: {}
      moid: {}
      name: {}
      vms: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
  vsphere.host:
    fields:
      acceptanceLevel: {}
      adapters: {}
      advancedSettings: {}
      distributedSwitch: {}
      inventoryPath: {}
      kernelModules: {}
      moid: {}
      name: {}
      ntp: {}
      packages: {}
      properties: {}
      services: {}
      snmp: {}
      standardSwitch: {}
      timezone: {}
      vmknics: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
    snippets:
    - query: |
        // targeting a single ESXi host
        esxi.host {
          acceptanceLevel == 'VMwareCertified' || acceptanceLevel == 'VMwareAccepted' || acceptanceLevel == 'PartnerSupported'
        }

        // targeting the vSphere API
        vsphere.datacenters {
          hosts {
            acceptanceLevel == 'VMwareCertified' || acceptanceLevel == 'VMwareAccepted' || acceptanceLevel == 'PartnerSupported'
          }
        }
      title: Verify the Software AcceptanceLevel for ESXi host
    - query: |
        esxi.host {
          packages {
            acceptanceLevel == 'VMwareCertified' || acceptanceLevel == 'VMwareAccepted' || acceptanceLevel == 'PartnerSupported'
          }
        }
      title: Verify that each vib is "VMwareCertified" or "VMwareAccepted"
  vsphere.license:
    fields:
      name: {}
      total: {}
      used: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
  vsphere.vm:
    fields:
      advancedSettings: {}
      inventoryPath: {}
      moid: {}
      name: {}
      properties: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
  vsphere.vmknic:
    fields:
      ipv4: {}
      ipv6: {}
      name: {}
      properties: {}
      tags: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
  vsphere.vmnic:
    fields:
      details: {}
      name: {}
      pauseParams: {}
      properties: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
  vsphere.vswitch.dvs:
    fields:
      name: {}
      properties: {}
      uplinks: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
  vsphere.vswitch.standard:
    fields:
      failoverPolicy: {}
      name: {}
      properties: {}
      securityPolicy: {}
      shapingPolicy: {}
      uplinks: {}
    min_mondoo_version: 5.15.0
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
  windows:
    fields:
      computerInfo: {}
      features: {}
      hotfixes: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: windows.computerInfo['WindowsInstallationType'] == 'Server Core'
      title: Check the OS Edition
  windows.feature:
    fields:
      description: {}
      displayName: {}
      installState: {}
      installed: {}
      name: {}
      path: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: windows.feature('SNMP-Service').installed
      title: Check that a Windows features is installed
    - query: windows.feature('Windows-Defender').installed == false
      title: Check that a specific feature is not installed
  windows.firewall:
    fields:
      profiles: {}
      rules: {}
      settings: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: |
        windows.firewall.rules.where ( displayName == "File and Printer Sharing (Echo Request - ICMPv4-In)") {
          enabled == 1
        }
      title: Check a specific Windows Firewall rule
  windows.firewall.profile:
    fields:
      allowInboundRules: {}
      allowLocalFirewallRules: {}
      allowLocalIPsecRules: {}
      allowUnicastResponseToMulticast: {}
      allowUserApps: {}
      allowUserPorts: {}
      defaultInboundAction: {}
      defaultOutboundAction: {}
      enableStealthModeForIPsec: {}
      enabled: {}
      instanceID: {}
      logAllowed: {}
      logBlocked: {}
      logFileName: {}
      logIgnored: {}
      logMaxSizeKilobytes: {}
      name: {}
      notifyOnListen: {}
    min_mondoo_version: 5.15.0
  windows.firewall.rule:
    fields:
      action: {}
      description: {}
      direction: {}
      displayGroup: {}
      displayName: {}
      edgeTraversalPolicy: {}
      enabled: {}
      enforcementStatus: {}
      instanceID: {}
      localOnlyMapping: {}
      looseSourceMapping: {}
      name: {}
      policyStoreSource: {}
      policyStoreSourceType: {}
      primaryStatus: {}
      status: {}
    min_mondoo_version: 5.15.0
  windows.hotfix:
    fields:
      caption: {}
      description: {}
      hotfixId: {}
      installedBy: {}
      installedOn: {}
    min_mondoo_version: 5.15.0
  yaml.path:
    fields:
      filepath: {}
      jsonpath: {}
      result: {}
    min_mondoo_version: 5.15.0
  yum:
    fields:
      repos: {}
      vars: {}
    min_mondoo_version: 5.15.0
  yum.repo:
    fields:
      baseurl: {}
      enabled: {}
      expire: {}
      file:
        min_mondoo_version: 5.18.0
      filename: {}
      id: {}
      mirrors: {}
      name: {}
      pkgs: {}
      revision: {}
      size: {}
      status: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: |
        yum.repo('salt-latest') {
          enabled
        }
      title: Check if a yum repo is enabled
