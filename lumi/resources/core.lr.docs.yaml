resources:
  arista.eos:
    platform:
      name:
      - arista-eos
    snippets:
    - query: arista.eos.version
      title: Arista EOS Version
    - query: arista.eos.version['version'] == /18\./
      title: Verify that Arista EOS Version is 18.x
    - query: arista.eos.interfaces { name mtu bandwidth status }
      title: Display EOS interfaces
    - query: arista.eos.interfaces.where ( status['linkStatus'] == "connected") {  name
        mtu bandwidth stauts}
      title: Display all connected EOS interfaces
    - query: arista.eos.hostname
      title: EOS Hostname
  arista.eos.interface:
    platform:
      name:
      - arista-eos
  arista.eos.ipInterface:
    platform:
      name:
      - arista-eos
  arista.eos.ntpSetting:
    platform:
      name:
      - arista-eos
  arista.eos.role:
    platform:
      name:
      - arista-eos
  arista.eos.runningConfig:
    platform:
      name:
      - arista-eos
  arista.eos.runningConfig.section:
    platform:
      name:
      - arista-eos
  arista.eos.snmpSetting:
    platform:
      name:
      - arista-eos
  arista.eos.spt.mstInterface:
    platform:
      name:
      - arista-eos
    snippets:
    - query: |
        arista.eos.stp.mstInstances {
         protocol == "mstp"
        }
      title: Verify the Spanning-Tree Version
  arista.eos.stp:
    platform:
      name:
      - arista-eos
  arista.eos.stp.mst:
    platform:
      name:
      - arista-eos
  arista.eos.user:
    platform:
      name:
      - arista-eos
  audit.advisory: null
  audit.cve: null
  audit.cvss: null
  audit.exploit: null
  auditpol:
    snippets:
    - query: auditpol.list { inclusionsetting exclusionsetting  subcategory }
      title: List all audit policies
    - query: |
        auditpol.where(subcategory == 'Sensitive Privilege Use').list {
          inclusionsetting == 'Success and Failure'
        }
      title: Check a specific auditpol configuration
  auditpol.entry: null
  authorizedkeys: null
  authorizedkeys.entry: null
  aws:
    platform:
      name:
      - aws
  aws.accessAnalyzer:
    platform:
      name:
      - aws
  aws.accessanalyzer.analyzer:
    platform:
      name:
      - aws
  aws.account:
    platform:
      name:
      - aws
  aws.acm:
    platform:
      name:
      - aws
  aws.acm.certificate:
    platform:
      name:
      - aws
  aws.apigateway:
    platform:
      name:
      - aws
  aws.apigateway.restapi:
    platform:
      name:
      - aws
  aws.apigateway.stage:
    platform:
      name:
      - aws
  aws.autoscaling:
    platform:
      name:
      - aws
  aws.autoscaling.group:
    platform:
      name:
      - aws
  aws.cloudtrail:
    platform:
      name:
      - aws
  aws.cloudtrail.trail:
    platform:
      name:
      - aws
  aws.cloudwatch:
    platform:
      name:
      - aws
  aws.cloudwatch.loggroup:
    platform:
      name:
      - aws
  aws.cloudwatch.loggroup.metricsfilter:
    platform:
      name:
      - aws
  aws.cloudwatch.metric:
    platform:
      name:
      - aws
  aws.cloudwatch.metricsalarm:
    platform:
      name:
      - aws
  aws.codebuild:
    platform:
      name:
      - aws
  aws.codebuild.project:
    platform:
      name:
      - aws
  aws.config:
    platform:
      name:
      - aws
  aws.config.recorder:
    platform:
      name:
      - aws
  aws.config.rule:
    platform:
      name:
      - aws
  aws.dms:
    platform:
      name:
      - aws
  aws.dynamodb:
    platform:
      name:
      - aws
  aws.dynamodb.globaltable:
    platform:
      name:
      - aws
  aws.dynamodb.limit:
    platform:
      name:
      - aws
  aws.dynamodb.table:
    platform:
      name:
      - aws
  aws.ec2:
    platform:
      name:
      - aws
  aws.ec2.image:
    platform:
      name:
      - aws
  aws.ec2.instance:
    platform:
      name:
      - aws
  aws.ec2.instance.device:
    platform:
      name:
      - aws
  aws.ec2.internetgateway:
    platform:
      name:
      - aws
  aws.ec2.networkacl:
    platform:
      name:
      - aws
  aws.ec2.networkacl.entry:
    platform:
      name:
      - aws
  aws.ec2.networkacl.entry.portrange:
    platform:
      name:
      - aws
  aws.ec2.securitygroup:
    platform:
      name:
      - aws
  aws.ec2.securitygroup.ippermission:
    platform:
      name:
      - aws
  aws.ec2.snapshot:
    platform:
      name:
      - aws
  aws.ec2.vgwtelemetry:
    platform:
      name:
      - aws
  aws.ec2.volume:
    platform:
      name:
      - aws
  aws.ec2.vpnconnection:
    platform:
      name:
      - aws
  aws.efs:
    platform:
      name:
      - aws
  aws.efs.filesystem:
    platform:
      name:
      - aws
  aws.elasticache:
    platform:
      name:
      - aws
  aws.elb:
    platform:
      name:
      - aws
  aws.elb.loadbalancer:
    platform:
      name:
      - aws
  aws.emr:
    platform:
      name:
      - aws
  aws.emr.cluster:
    platform:
      name:
      - aws
  aws.es:
    platform:
      name:
      - aws
  aws.es.domain:
    platform:
      name:
      - aws
  aws.guardduty:
    platform:
      name:
      - aws
  aws.guardduty.detector:
    platform:
      name:
      - aws
  aws.iam:
    platform:
      name:
      - aws
  aws.iam.group:
    platform:
      name:
      - aws
  aws.iam.policy:
    platform:
      name:
      - aws
  aws.iam.policyversion:
    platform:
      name:
      - aws
  aws.iam.role:
    platform:
      name:
      - aws
  aws.iam.user:
    platform:
      name:
      - aws
  aws.iam.usercredentialreportentry:
    platform:
      name:
      - aws
  aws.iam.virtualmfadevice:
    platform:
      name:
      - aws
  aws.kms:
    platform:
      name:
      - aws
  aws.kms.key:
    platform:
      name:
      - aws
  aws.lambda:
    platform:
      name:
      - aws
  aws.lambda.function:
    platform:
      name:
      - aws
  aws.rds:
    platform:
      name:
      - aws
  aws.rds.dbcluster:
    platform:
      name:
      - aws
  aws.rds.dbinstance:
    platform:
      name:
      - aws
  aws.rds.snapshot:
    platform:
      name:
      - aws
  aws.redshift:
    platform:
      name:
      - aws
  aws.redshift.cluster:
    platform:
      name:
      - aws
  aws.s3:
    docs:
      desc: |
        Amazon Simple Storage Service (Amazon S3) is an object storage service
    platform:
      name:
      - aws
    refs:
    - title: Amazon S3 Product Page
      url: https://aws.amazon.com/s3/
    - title: 'AWS Documentation: What is Amazon S3?'
      url: https://docs.aws.amazon.com/AmazonS3/latest/userguide/Welcome.html
  aws.s3.bucket:
    docs:
      desc: |
        Buckets and objects are AWS resources, and Amazon S3 provides APIs for you to manage them
    platform:
      name:
      - aws
    refs:
    - title: Amazon S3 Product Page
      url: https://aws.amazon.com/s3/
    - title: 'AWS Documentation: Buckets overview'
      url: https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingBucket.html
  aws.s3.bucket.corsrule:
    platform:
      name:
      - aws
  aws.s3.bucket.grant:
    platform:
      name:
      - aws
  aws.s3.bucket.policy:
    docs:
      desc: |
        Bucket policies grant permission to your Amazon S3 resources
    platform:
      name:
      - aws
    refs:
    - title: 'AWS Documentation: Using bucket policies'
      url: https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-policies.html
  aws.s3control:
    platform:
      name:
      - aws
  aws.sagemaker:
    platform:
      name:
      - aws
  aws.sagemaker.endpoint:
    platform:
      name:
      - aws
  aws.sagemaker.notebookinstance:
    platform:
      name:
      - aws
  aws.sagemaker.notebookinstance.details:
    platform:
      name:
      - aws
  aws.secretsmanager:
    platform:
      name:
      - aws
  aws.secretsmanager.secret:
    platform:
      name:
      - aws
  aws.securityhub:
    platform:
      name:
      - aws
  aws.securityhub.hub:
    platform:
      name:
      - aws
  aws.sns:
    platform:
      name:
      - aws
  aws.sns.subscription:
    platform:
      name:
      - aws
  aws.sns.topic:
    platform:
      name:
      - aws
  aws.vpc:
    platform:
      name:
      - aws
  aws.vpc.flowlog:
    platform:
      name:
      - aws
  aws.vpc.routetable:
    platform:
      name:
      - aws
  azuread:
    platform:
      name:
      - azure
  azuread.application:
    platform:
      name:
      - azure
  azuread.domain:
    platform:
      name:
      - azure
  azuread.group:
    platform:
      name:
      - azure
  azuread.serviceprincipal:
    platform:
      name:
      - azure
  azuread.user:
    platform:
      name:
      - azure
  azurerm:
    platform:
      name:
      - azure
  azurerm.compute:
    platform:
      name:
      - azure
  azurerm.compute.disk:
    platform:
      name:
      - azure
  azurerm.compute.vm:
    platform:
      name:
      - azure
  azurerm.keyvault:
    platform:
      name:
      - azure
  azurerm.keyvault.certificate:
    platform:
      name:
      - azure
  azurerm.keyvault.key:
    platform:
      name:
      - azure
  azurerm.keyvault.secret:
    platform:
      name:
      - azure
  azurerm.keyvault.vault:
    platform:
      name:
      - azure
  azurerm.mariadb:
    platform:
      name:
      - azure
  azurerm.mariadb.database:
    platform:
      name:
      - azure
  azurerm.mariadb.server:
    platform:
      name:
      - azure
  azurerm.monitor:
    platform:
      name:
      - azure
  azurerm.monitor.diagnosticsetting:
    platform:
      name:
      - azure
  azurerm.monitor.logprofile:
    platform:
      name:
      - azure
  azurerm.mysql:
    platform:
      name:
      - azure
  azurerm.mysql.database:
    platform:
      name:
      - azure
  azurerm.mysql.server:
    platform:
      name:
      - azure
  azurerm.network:
    platform:
      name:
      - azure
  azurerm.network.interface:
    platform:
      name:
      - azure
  azurerm.network.securitygroup:
    platform:
      name:
      - azure
  azurerm.network.securityrule:
    platform:
      name:
      - azure
  azurerm.network.watcher:
    platform:
      name:
      - azure
  azurerm.postgresql:
    platform:
      name:
      - azure
  azurerm.postgresql.database:
    platform:
      name:
      - azure
  azurerm.postgresql.server:
    platform:
      name:
      - azure
  azurerm.resource:
    platform:
      name:
      - azure
  azurerm.sql:
    platform:
      name:
      - azure
  azurerm.sql.configuration:
    platform:
      name:
      - azure
  azurerm.sql.database:
    platform:
      name:
      - azure
  azurerm.sql.databaseusage:
    platform:
      name:
      - azure
  azurerm.sql.firewallrule:
    platform:
      name:
      - azure
  azurerm.sql.server:
    platform:
      name:
      - azure
  azurerm.sql.server.administrator:
    platform:
      name:
      - azure
  azurerm.storage:
    platform:
      name:
      - azure
  azurerm.storage.account:
    platform:
      name:
      - azure
  azurerm.storage.container:
    platform:
      name:
      - azure
  azurerm.web:
    platform:
      name:
      - azure
  azurerm.web.appsite:
    platform:
      name:
      - azure
  azurerm.web.appsiteauthsettings:
    platform:
      name:
      - azure
  azurerm.web.appsiteconfig:
    platform:
      name:
      - azure
  certificate: null
  command: null
  dns:
    maturity: experimental
  dns.dkimRecord: null
  dns.mxRecord:
    maturity: experimental
  dns.record:
    maturity: experimental
  docker: null
  docker.container: null
  docker.image: null
  equinix.metal.device:
    maturity: experimental
    platform:
      name:
      - equinix
  equinix.metal.organization:
    maturity: experimental
    platform:
      name:
      - equinix
  equinix.metal.project:
    maturity: experimental
    platform:
      name:
      - equinix
  equinix.metal.sshkey:
    maturity: experimental
    platform:
      name:
      - equinix
  equinix.metal.user:
    maturity: experimental
    platform:
      name:
      - equinix
  esxi:
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
    snippets:
    - query: |
        esxi.host {
          kernelModules {
            signedStatus == "Signed"
          }
        }
      title: Check that all kernel modules are signed
  esxi.kernelmodule:
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
  esxi.ntpconfig:
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
  esxi.service:
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
  esxi.timezone:
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
  esxi.vib:
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
  file:
    snippets:
    - query: |
        file('/etc') {
          exists
          permissions.isDirectory
        }
      title: Test if a directory exists
  file.permissions: null
  files.find: null
  gcloud.compute: null
  gcloud.compute.instance: null
  gcloud.compute.serviceaccount: null
  gcloud.organization: null
  gcloud.project: null
  gcloud.resourcemanager.binding: null
  gcloud.sql: null
  gcloud.sql.instance: null
  gcloud.storage: null
  gcloud.storage.bucket: null
  github.organization:
    maturity: experimental
  gitlab.group:
    maturity: experimental
  gitlab.project:
    maturity: experimental
  group: null
  groups:
    snippets:
    - query: groups.where(name == 'wheel').list { members.all( name != 'username')
        }
      title: Ensure the user is not part of group
  ip6tables: null
  ipmi:
    maturity: experimental
  ipmi.chassis:
    maturity: experimental
  iptables: null
  iptables.entry: null
  k8s:
    platform:
      name:
      - kubernetes
  k8s.apiresource:
    platform:
      name:
      - kubernetes
  k8s.container:
    platform:
      name:
      - kubernetes
  k8s.cronjob:
    platform:
      name:
      - kubernetes
  k8s.daemonset:
    platform:
      name:
      - kubernetes
  k8s.deployment:
    platform:
      name:
      - kubernetes
  k8s.job:
    platform:
      name:
      - kubernetes
  k8s.namespace:
    platform:
      name:
      - kubernetes
  k8s.node:
    platform:
      name:
      - kubernetes
  k8s.pod:
    platform:
      name:
      - kubernetes
  kernel:
    snippets:
    - query: kernel.modules { name loaded size }
      title: List all kernel modules
    - query: kernel.modules.where( loaded == true ) { name }
      title: List all loaded kernel modules
  kernel.module: null
  logindefs: null
  lsblk: null
  lsblk.entry: null
  machine: null
  machine.baseboard: null
  machine.bios: null
  machine.chassis: null
  machine.system: null
  macos: null
  macos.alf: null
  macos.security: null
  macos.systemsetup: null
  macos.timemachine: null
  mondoo: null
  mondoo.asset: null
  mondoo.eol: null
  mount:
    snippets:
    - query: mount.list { path device fstype options }
      title: List all mount points
    - query: mount.one( path == "/" )
      title: Ensure the mountpoint exists
    - query: |
        mount.where( path == "/" ).list {
          device == '/dev/mapper/vg00-lv_root'
          fstype == 'xfs'
          options['rw'] != null
          options['relatime'] != null
          options['seclabel'] != null
          options['attr2'] != null
          options['inode64'] != null
          options['noquota'] != null
        }
      title: Check mountpoint configuration
  mount.point: null
  ms365.exchangeonline:
    platform:
      name:
      - microsoft365
  ms365.sharepointonline:
    platform:
      name:
      - microsoft365
  ms365.teams:
    platform:
      name:
      - microsoft365
  msgraph.beta:
    platform:
      name:
      - microsoft365
  msgraph.beta.application:
    platform:
      name:
      - microsoft365
  msgraph.beta.devicemanagement:
    platform:
      name:
      - microsoft365
  msgraph.beta.devicemanagement.devicecompliancepolicy:
    platform:
      name:
      - microsoft365
  msgraph.beta.devicemanagement.deviceconfiguration:
    platform:
      name:
      - microsoft365
  msgraph.beta.domain:
    platform:
      name:
      - microsoft365
  msgraph.beta.domaindnsrecord:
    platform:
      name:
      - microsoft365
  msgraph.beta.organization:
    platform:
      name:
      - microsoft365
  msgraph.beta.policies:
    platform:
      name:
      - microsoft365
  msgraph.beta.rolemanagement:
    platform:
      name:
      - microsoft365
  msgraph.beta.rolemanagement.roleassignment:
    platform:
      name:
      - microsoft365
  msgraph.beta.rolemanagement.roledefinition:
    platform:
      name:
      - microsoft365
  msgraph.beta.security:
    platform:
      name:
      - microsoft365
  msgraph.beta.security.securityscore:
    platform:
      name:
      - microsoft365
  msgraph.beta.user:
    platform:
      name:
      - microsoft365
  ntp.conf: null
  os:
    snippets:
    - query: os.env
      title: Show all environment variables
    - query: os.env['windir']
      title: Retrieve a single environment variable
  os.rootCertificates: null
  os.rootcertificates: null
  os.update: null
  package:
    snippets:
    - query: package('git').installed
      title: Check if a package is installed
  packages: null
  pam.conf: null
  pam.conf.serviceEntry: null
  parse: null
  parse.certificates: null
  parse.ini: null
  parse.json: null
  parse.plist: null
  parse.yaml: null
  pkix.extension: null
  pkix.name: null
  platform:
    snippets:
    - query: platform { name release }
      title: Platform Name and Release
  platform.advisories: null
  platform.cves: null
  platform.eol: null
  platform.exploits: null
  platform.virtualization: null
  port: null
  ports: null
  powershell:
    snippets:
    - query: |
        powershell('Get-WmiObject -Class Win32_volume -Filter "DriveType=3"| Select Label') {
          stdout == /PAGEFILE/
          stderr == ''
        }
      title: Run custom powershell command
    - query: |
        powershell('tzutil /g') {
          stdout.trim == 'GMT Standard Time'
          stderr == ''
        }
      title: Check the timezone
  privatekey: null
  process: null
  processes: null
  regex: null
  registrykey: null
  registrykey.property:
    snippets:
    - query: |
        registrykey.property(path: 'HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\EventLog\System', name: 'MaxSize') {
          value >= 32768
        }
      title: Verify a registry key property
  rsyslog.conf: null
  secpol:
    snippets:
    - query: secpol.privilegerights['SeRemoteShutdownPrivilege'].contains( _ == 'S-1-5-32-544')
      title: Check that a specific SID is included in the privilege rights
  service: null
  services: null
  shadow: null
  shadow.entry: null
  socket: null
  socketstats: null
  sshd: null
  sshd.config:
    snippets:
    - query: sshd.config.params['Banner'] == '/etc/ssh/sshd-banner'
      title: Check the ssh banner setting
  terraform:
    maturity: experimental
    platform:
      name:
      - terraform
    snippets:
    - query: terraform.blocks { nameLabel arguments }
      title: Display all Terraform blocks and their arguments
    - query: terraform.datasources { nameLabel arguments }
      title: Display all data blocks
    - query: terraform.resources { nameLabel arguments }
      title: Display all resource blocks
  terraform.block:
    maturity: experimental
    platform:
      name:
      - terraform
    snippets:
    - query: terraform.blocks { nameLabel arguments }
      title: Display all Terraform blocks and their arguments
  terraform.file:
    maturity: experimental
    platform:
      name:
      - terraform
    snippets:
    - query: terraform.files { path blocks { nameLabel } }
      title: Display all files and their blocks
  terraform.fileposition:
    maturity: experimental
    platform:
      name:
      - terraform
  terraform.module:
    maturity: experimental
    platform:
      name:
      - terraform
    snippets:
    - query: terraform.modules { key version source}
      title: Display all loaded Terraform modules
  time: null
  tls: null
  user: null
  users:
    snippets:
    - query: users.list { uid name }
      title: Display all users and their uid
    - query: users.one( name == 'root')
      title: Ensure user exists
    - query: users.none(name == "vagrant")
      title: Ensure user does not exist
    - query: |
        users.where( sid == /S-1-5-21-\d+-\d+-\d+-501/ ).list {
          name != "Guest"
        }
      title: Search for a specific SID and check for its values
  uuid: null
  vsphere:
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
    snippets:
    - query: vsphere.about
      title: Display Information about the vSphere environment
    - query: vsphere.datacenters { hosts { moid properties } }
      title: Display ESXi host moid and properties
    - query: vsphere.datacenters { hosts { ntp.server } }
      title: Display NTP server for all ESXi hosts
    - query: vsphere.datacenters { hosts { ntp.server.any(_ == "10.31.21.2") } }
      title: Ensure a specific NTP Server is set
    - query: |
        vsphere.datacenters {
          hosts {
            vmknics.where(tags == "Management") {
              properties['Enabled'] == true
              properties['MTU'] == 1500
              properties['VDSName'] != /(?i)storage/
            }
          }
        }
      title: Ensure specific VmkNics properties for all management VmkNics
  vsphere.cluster:
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
  vsphere.datacenter:
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
  vsphere.host:
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
    snippets:
    - query: |
        // targeting a single ESXi host
        esxi.host {
          acceptanceLevel == 'VMwareCertified' || acceptanceLevel == 'VMwareAccepted' || acceptanceLevel == 'PartnerSupported'
        }

        // targeting the vSphere API
        vsphere.datacenters {
          hosts {
            acceptanceLevel == 'VMwareCertified' || acceptanceLevel == 'VMwareAccepted' || acceptanceLevel == 'PartnerSupported'
          }
        }
      title: Verify the Software AcceptanceLevel for ESXi host
    - query: |
        esxi.host {
          packages {
            acceptanceLevel == 'VMwareCertified' || acceptanceLevel == 'VMwareAccepted' || acceptanceLevel == 'PartnerSupported'
          }
        }
      title: Verify that each vib is "VMwareCertified" or "VMwareAccepted"
  vsphere.license:
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
  vsphere.vm:
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
  vsphere.vmknic:
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
  vsphere.vmnic:
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
  vsphere.vswitch.dvs:
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
  vsphere.vswitch.standard:
    platform:
      name:
      - vmware-esxi
      - vmware-vsphere
  windows:
    snippets:
    - query: windows.computerInfo['WindowsInstallationType'] == 'Server Core'
      title: Check the OS Edition
  windows.feature:
    snippets:
    - query: windows.feature('SNMP-Service').installed
      title: Check that a Windows features is installed
    - query: windows.feature('Windows-Defender').installed == false
      title: Check that a specific feature is not installed
  windows.firewall:
    snippets:
    - query: |
        windows.firewall.rules.where ( displayName == "File and Printer Sharing (Echo Request - ICMPv4-In)") {
          enabled == 1
        }
      title: Check a specific Windows Firewall rule
  windows.firewall.profile: null
  windows.firewall.rule: null
  windows.hotfix: null
  yaml.path: null
  yum: null
  yum.repo:
    snippets:
    - query: |
        yum.repo('salt-latest') {
          enabled
        }
      title: Check if a yum repo is enabled
