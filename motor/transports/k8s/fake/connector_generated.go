// Code generated by MockGen. DO NOT EDIT.
// Source: ./connector.go

// Package fake is a generated GoMock package.
package fake

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	platform "go.mondoo.io/mondoo/motor/platform"
	k8s "go.mondoo.io/mondoo/motor/transports/k8s"
	resources "go.mondoo.io/mondoo/motor/transports/k8s/resources"
	v1 "k8s.io/api/core/v1"
	version "k8s.io/apimachinery/pkg/version"
)

// MockConnector is a mock of Connector interface.
type MockConnector struct {
	ctrl     *gomock.Controller
	recorder *MockConnectorMockRecorder
}

// MockConnectorMockRecorder is the mock recorder for MockConnector.
type MockConnectorMockRecorder struct {
	mock *MockConnector
}

// NewMockConnector creates a new mock instance.
func NewMockConnector(ctrl *gomock.Controller) *MockConnector {
	mock := &MockConnector{ctrl: ctrl}
	mock.recorder = &MockConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnector) EXPECT() *MockConnectorMockRecorder {
	return m.recorder
}

// Identifier mocks base method.
func (m *MockConnector) Identifier() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Identifier")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Identifier indicates an expected call of Identifier.
func (mr *MockConnectorMockRecorder) Identifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identifier", reflect.TypeOf((*MockConnector)(nil).Identifier))
}

// Name mocks base method.
func (m *MockConnector) Name() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Name indicates an expected call of Name.
func (mr *MockConnectorMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockConnector)(nil).Name))
}

// Namespaces mocks base method.
func (m *MockConnector) Namespaces() ([]v1.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespaces")
	ret0, _ := ret[0].([]v1.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Namespaces indicates an expected call of Namespaces.
func (mr *MockConnectorMockRecorder) Namespaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespaces", reflect.TypeOf((*MockConnector)(nil).Namespaces))
}

// PlatformInfo mocks base method.
func (m *MockConnector) PlatformInfo() *platform.Platform {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlatformInfo")
	ret0, _ := ret[0].(*platform.Platform)
	return ret0
}

// PlatformInfo indicates an expected call of PlatformInfo.
func (mr *MockConnectorMockRecorder) PlatformInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlatformInfo", reflect.TypeOf((*MockConnector)(nil).PlatformInfo))
}

// Pods mocks base method.
func (m *MockConnector) Pods(namespace v1.Namespace) ([]v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pods", namespace)
	ret0, _ := ret[0].([]v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pods indicates an expected call of Pods.
func (mr *MockConnectorMockRecorder) Pods(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pods", reflect.TypeOf((*MockConnector)(nil).Pods), namespace)
}

// Resources mocks base method.
func (m *MockConnector) Resources(kind, name string) (*k8s.ResourceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resources", kind, name)
	ret0, _ := ret[0].(*k8s.ResourceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resources indicates an expected call of Resources.
func (mr *MockConnectorMockRecorder) Resources(kind, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resources", reflect.TypeOf((*MockConnector)(nil).Resources), kind, name)
}

// ServerVersion mocks base method.
func (m *MockConnector) ServerVersion() *version.Info {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerVersion")
	ret0, _ := ret[0].(*version.Info)
	return ret0
}

// ServerVersion indicates an expected call of ServerVersion.
func (mr *MockConnectorMockRecorder) ServerVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerVersion", reflect.TypeOf((*MockConnector)(nil).ServerVersion))
}

// SupportedResourceTypes mocks base method.
func (m *MockConnector) SupportedResourceTypes() (*resources.ApiResourceIndex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportedResourceTypes")
	ret0, _ := ret[0].(*resources.ApiResourceIndex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupportedResourceTypes indicates an expected call of SupportedResourceTypes.
func (mr *MockConnectorMockRecorder) SupportedResourceTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportedResourceTypes", reflect.TypeOf((*MockConnector)(nil).SupportedResourceTypes))
}
